«IMPORT vary::pseudocodigo::dsl::cpp::ui::wizard»
«IMPORT vary::pseudocodigo::dsl::cpp::ui::extension»
«EXTENSION extension::JavaExtensions»

«DEFINE main FOR VaryGrammarProjectInfo»
«EXPAND model FOR this»
«EXPAND workflow FOR this»
«ENDDEFINE»

«DEFINE template FOR VaryGrammarProjectInfo»
«FILE "../.metadata/.plugins/org.eclipse.core.runtime/.settings/vary.pseudocodigo.dsl.cpp.ui.prefs"-»
eclipse.preferences.version=1
vary.pseudocodigo.dsl.cpp.VaryGrammar.templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_si" deleted\="false" description\="Ejemplo de la estructura selectiva simple" enabled\="true" name\="Estructura si">si (a\!\=2) entonces&\#13;\n\t//Funcionalidad&\#13;\nfin_si</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_si" deleted\="false" description\="Ejemplo de la estructura selectiva simple con sino" enabled\="true" name\="Estructura sino">si ((a\=\=1) o (a\=\=3)) entonces&\#13;\n\t//Funcionalidad&\#13;\nsino&\#13;\n\t//Funcionalidad&\#13;\nfin_si</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_desde" deleted\="false" description\="Ejemplo de la estructura repetitiva desde " enabled\="true" name\="Estructura desde">desde i\=0 hasta 10 hacer&\#13;\n\t//Funcionalidad&\#13;\nfin_desde&\#13;\n</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_mientras" deleted\="false" description\="Ejemplo de la estructura repetitiva mientras" enabled\="true" name\="Estructura mientras">mientras (a&lt;2) hacer&\#13;\n\t//Funcionalidad&\#13;\nfin_mientras</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_repetir" deleted\="false" description\="Ejemplo de la estructura repetitiva repetir" enabled\="true" name\="Estructura repetir">repetir &\#13;\n    \t//Funcionalidad&\#13;\nhasta_que (a \=\= 6) &\#13;\n</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_procedimiento" deleted\="false" description\="Ejemplo de la estructura de un procedimiento" enabled\="true" name\="Estructura procedimiento">procedimiento nombre_procedimiento(E entero\: a, E/S entero\: b, S entero\: c)&\#13;\nvar&\#13;\n//Declaraci\u00F3n de las variables necesarias&\#13;\ninicio&\#13;\n//Funcionalidad&\#13;\nfin_procedimiento</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_segun_sea" deleted\="false" description\="Ejemplo estructura de la estructura selectiva m\u00FAltiple" enabled\="true" name\="Estructura segun_sea">segun_sea(op) hacer&\#13;\n\t0\: escribir("Caso 0")&\#13;\n\t\t//Resto de setencias&\#13;\n\t1\: escribir("Caso 1")&\#13;\n\t\t//Resto de sentencias&\#13;\n\t2\: escribir("Caso 2")&\#13;\n\t\t//Resto de sentencias&\#13;\n\t3\: escribir("Caso 3")&\#13;\n\t\t//Resto de sentencias&\#13;\n\ten_otro_caso\: &\#13;\n\tescribir("Caso por defecto")&\#13;\n\t//Resto de sentencias&\#13;\nfin_segun</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_funcion" deleted\="false" description\="Ejemplo de la estructura de una funci\u00F3n" enabled\="true" name\="Estructura funci\u00F3n">funcion nombre_funcion(E entero\: a)&\#13;\nvar&\#13;\n//Declaraci\u00F3n de las variables necesarias&\#13;\ninicio&\#13;\n//Funcionalidad&\#13;\nfin_funcion</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_registro\:" deleted\="false" description\="Sintaxis del tipo complejo registro" enabled\="true" name\="Registro">registro\: EjemploR&\#13;\n\tcadena\: campo1&\#13;\n\tentero\:campo2&\#13;\n\treal\: campo3&\#13;\n\tlogico\: campo4&\#13;\n\tcaracter\: campo5&\#13;\nfin_registro</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_archivo de " deleted\="false" description\="Sintaxis del tipo complejo archivo" enabled\="true" name\="Archivo de enteros">archivo de entero\: EjemploAE</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_archivo de " deleted\="false" description\="Sintaxis del tipo complejo archivo" enabled\="true" name\="Archivo de reales">archivo de real\: EjemploAR</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_archivo de " deleted\="false" description\="Sintaxis del tipo complejo archivo" enabled\="true" name\="Archivo de logicos">archivo de logico\: EjemploAL</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_archivo de " deleted\="false" description\="Sintaxis del tipo complejo archivo" enabled\="true" name\="Archivo de caracteres">archivo de caracter\: EjemploAC</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_archivo de " deleted\="false" description\="Sintaxis del tipo complejo archivo" enabled\="true" name\="Archivo de cadenas">archivo de cadena\: EjemploACA&\#13;\n&\#13;\n&\#13;\n</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Enumerado" deleted\="false" description\="Sintaxis del tipo complejo enumerado" enabled\="true" name\="Enumerado">enumeracionEjemplo \= {valor1, valor2, valor3}</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Subrango" deleted\="false" description\="Sintaxis del tipo complejo subrango" enabled\="true" name\="Subrango">ejemploSubrango \= 0..9</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.kw_funcion" deleted\="false" description\="Ejemplo de la estructura de una funcion recursiva" enabled\="true" name\="Estructura funcion recursiva">funcion nombre_recursiva(E/S entero\: n)&\#13;\nvar&\#13;\nlogico\: condicion&\#13;\n//Declaraci\u00F3n del resto de variables&\#13;\ninicio&\#13;\n&\#13;\nsi (no condicion) entonces&\#13;\n\tdevolver(0)&\#13;\nsino &\#13;\n\tdevolver(nombre_recursiva((n-1)))&\#13;\nfin_si&\#13;\nfin_funcion</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Vector" deleted\="false" description\="Vector de datos de tipo entero" enabled\="true" name\="Vector de enteros">vector [10]  de entero\: EjemploVE</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Vector" deleted\="false" description\="Vector de datos de tipo caracter" enabled\="true" name\="Vector de caracteres">vector [10] de caracter\: EjemploVC</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Vector" deleted\="false" description\="Vector de datos de tipo l\u00F3gico" enabled\="true" name\="Vector de tipo l\u00F3gico">vector [10] de logico\: EjemploVL</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Vector" deleted\="false" description\="Vector de datos de tipo cadena" enabled\="true" name\="Vector de cadena">vector [10] de cadena\: EjemploVCAD</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Vector" deleted\="false" description\="Vector de datos de tipo real" enabled\="true" name\="Vector de real">vector [10] de real\: EjemploVR</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Matriz" deleted\="false" description\="Matriz de datos de tipo entero" enabled\="true" name\="Matriz de entero">matriz [10][10] de entero\: EjemploME</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Matriz" deleted\="false" description\="Matriz de datos de tipo real" enabled\="true" name\="Matriz de real">matriz [10][10] de real\: EjemploMR</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Matriz" deleted\="false" description\="Matriz de datos de tipo l\u00F3gico" enabled\="true" name\="Matriz de l\u00F3gico">matriz [10][10] de logico\: EjemploML</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Matriz" deleted\="false" description\="Matriz de datos de tipo caracter" enabled\="true" name\="Matriz de caracter">matriz [10][10] de caracter\: EjemploMC</template><template autoinsert\="true" context\="vary.pseudocodigo.dsl.cpp.VaryGrammar.Matriz" deleted\="false" description\="Matriz de datos de tipo cadena" enabled\="true" name\="Matriz de cadena">matriz [10][10] de cadena\: EjemploCAD</template></templates>
«ENDFILE»
«ENDDEFINE»

«DEFINE model FOR VaryGrammarProjectInfo»
«FILE "src/input.vycpp"-»
/*
 * Algoritmo: Ejemplo
 * Autor: 
 * Fecha: 
 */
 
Algoritmo ejemplo
 
//Seccion de definicion de constantes (opcional)
const	
	//Ejemplo de declaracion de una constante:
	DIM = 10


//Seccion de definicion de tipos (opcional)
tipo
	//Ejemplo de vector de tipo entero
	vector [DIM] de entero:  tVect
	
	
//Seccion de definicion de subalgoritmos: funciones y procedimientos	


//Ejemplo de funcion para realizar la suma de dos numeros

//Precondicion: a, b>=0 (enteros inicializados)
//Postcondicion: devuelve a + b
entero funcion sumaFun(E entero: a, E entero:  b)
var //Declaracion de variables
	entero:  resultado
inicio //Cuerpo de la funcion
	resultado = a + b
	devolver resultado
fin_funcion

//Ejemplo de procedimiento para realizar la suma de dos numeros

//Precondicion: a, b>=0 (enteros inicializados)
//Postcondicion: devuelve a + b
procedimiento sumaProc(E entero: a, E entero: b, S entero: res)
var
inicio //Cuerpo del procedimiento
	res = a +b
fin_procedimiento

//Precondicion: v es una variable de tipo tVect, vector de elementos de tipo entero.
//      n es una variable entera que debe estar inicializada n>=0. 
//Postcondicion: v es inicializado
procedimiento leerVector(S tVect: v, E entero: n)
var
    entero: i
inicio
   desde i = 1 hasta n hacer
      leer(v[i])
   fin_desde
fin_procedimiento

//Precondicion: v es una variable de tipo tVect, vector de elementos de tipo entero. 
//      n es una variable entera que debe estar inicializada n>=0.
//Postcondicion: devuelve el producto escalar del vector v
entero funcion productoEscalar(E tVect: v, E entero: n)
var
    entero: res, i
inicio
    i = 1
    res = 0
    //Ejemplo de bucle mientras.  
    mientras i <=n hacer
        res = res + v[i]
    fin_mientras
    devolver res
fin_funcion

//Precondicion: v es una variable de tipo tVect, vector de elementos de tipo entero. 
//      n es una variable entera que debe estar inicializada n>=0.
//Postcondicion: escribe los valores del vector por la salida estandar
procedimiento escribirVector(E tVect: v, E entero: n)
var
    entero: i
inicio
    desde i = 1 hasta n hacer
        escribir(v[i])
    fin_desde
fin_procedimiento


//Precondicion: funcion para comenzar el calculo del producto escalar de un vector
//Postcondicion: llama a los procedimientos y funciones para inicializar un vector, escribirlo y calcular su producto escalar.
procedimiento calculo_productoEscalar()
var
    tVect: v    
inicio
   
	escribir("Introduzca los elementos del vector: ")
	leerVector(v, DIM)
		
	escribir("El producto escalar del vector: ")
	escribirVector(v, DIM)
    escribir("es: ", productoEscalar(v,DIM))
fin_procedimiento		


//Precondicion: funcion menu, no recibe ningun parametro
//Postcondicion: visualiza menu de operaciones en pantalla
entero funcion menu()
var
    entero: valor
inicio
    repetir 
       escribir("Elija una opcion: ")
       escribir("1: Sumar dos operandos con una funcion.")
       escribir("2: Sumar dos operandos con un procedimiento.")
       escribir("3: Calcular el producto escalar de un vector.")
    hasta_que valor>0 y valor<=3
    devolver valor
fin_funcion
	
procedimiento operacion(E entero: opcion)
var
    tVect: vect
	entero: a, b, resultado
inicio
    escribir("Introduce el valor del sumando a")
	leer(a)
	escribir("Introduce el valor del sumando b")
	leer(b)
	
	//CORRECCION DE ERRORES: Parametro de funcion no reconocido en segun_sea
	
	segun_sea(opcion) hacer
		caso 1:  escribir("La suma de ambos valores calculado con la funcion es: ", sumaFun(a,b))
	    caso 2: sumaProc(a,b, resultado)
	        escribir("La suma de ambos valores calculdo con el procedimiento es: ", resultado)
       caso 3:  //Llamadas a los subalgoritmos para calcular el producto escalar de un vector	
            calculo_productoEscalar()
		en_otro_caso: escribir("Opcion no valida.")
	fin_segun
fin_procedimiento	


//Comienzo del algoritmo (Obligatorio)
principal	
var
    entero: opcion
inicio //Cuerpo del algoritmo principal	

	//Llamadas a los subalgoritmos para comenzar la traza del algoritmo	
	
	//En este ejemplo se realiza la llamada al menu y posteriormente a operacion
	opcion=menu()
	operacion(opcion)
fin_inicio

fin_algoritmo
«ENDFILE»
«ENDDEFINE»

«DEFINE workflow FOR VaryGrammarProjectInfo»
«ENDDEFINE»
