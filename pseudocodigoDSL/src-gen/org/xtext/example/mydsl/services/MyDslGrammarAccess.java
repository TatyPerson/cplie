/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodigoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Codigo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFuncionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFuncionSubprocesoParserRuleCall_0_0_0 = (RuleCall)cFuncionAssignment_0_0.eContents().get(0);
		private final Assignment cFuncionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFuncionSubprocesoParserRuleCall_0_1_0 = (RuleCall)cFuncionAssignment_0_1.eContents().get(0);
		private final Assignment cTieneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTieneInicioParserRuleCall_1_0 = (RuleCall)cTieneAssignment_1.eContents().get(0);
		
		//Codigo:
		//	(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio;
		public ParserRule getRule() { return rule; }

		//(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio
		public Group getGroup() { return cGroup; }

		//(funcion+=Subproceso funcion+=Subproceso*)?
		public Group getGroup_0() { return cGroup_0; }

		//funcion+=Subproceso
		public Assignment getFuncionAssignment_0_0() { return cFuncionAssignment_0_0; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_0_0_0() { return cFuncionSubprocesoParserRuleCall_0_0_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_0_1() { return cFuncionAssignment_0_1; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_0_1_0() { return cFuncionSubprocesoParserRuleCall_0_1_0; }

		//tiene=Inicio
		public Assignment getTieneAssignment_1() { return cTieneAssignment_1; }

		//Inicio
		public RuleCall getTieneInicioParserRuleCall_1_0() { return cTieneInicioParserRuleCall_1_0; }
	}

	public class SubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subproceso:
		//	Funcion | Procedimiento;
		public ParserRule getRule() { return rule; }

		//Funcion | Procedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//Funcion
		public RuleCall getFuncionParserRuleCall_0() { return cFuncionParserRuleCall_0; }

		//Procedimiento
		public RuleCall getProcedimientoParserRuleCall_1() { return cProcedimientoParserRuleCall_1; }
	}

	public class SentenciasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentencias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLlamadaFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEscribirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSiParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMientrasParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRepetirParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDesdeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIncrementoParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Sentencias:
		//	LlamadaFuncion | Asignacion | Escribir | Leer | Si | mientras | repetir | desde | incremento;
		public ParserRule getRule() { return rule; }

		//LlamadaFuncion | Asignacion | Escribir | Leer | Si | mientras | repetir | desde | incremento
		public Alternatives getAlternatives() { return cAlternatives; }

		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_0() { return cLlamadaFuncionParserRuleCall_0; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_1() { return cAsignacionParserRuleCall_1; }

		//Escribir
		public RuleCall getEscribirParserRuleCall_2() { return cEscribirParserRuleCall_2; }

		//Leer
		public RuleCall getLeerParserRuleCall_3() { return cLeerParserRuleCall_3; }

		//Si
		public RuleCall getSiParserRuleCall_4() { return cSiParserRuleCall_4; }

		//mientras
		public RuleCall getMientrasParserRuleCall_5() { return cMientrasParserRuleCall_5; }

		//repetir
		public RuleCall getRepetirParserRuleCall_6() { return cRepetirParserRuleCall_6; }

		//desde
		public RuleCall getDesdeParserRuleCall_7() { return cDesdeParserRuleCall_7; }

		//incremento
		public RuleCall getIncrementoParserRuleCall_8() { return cIncrementoParserRuleCall_8; }
	}

	public class OperadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstCadenaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCaracterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumeroEnteroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumeroDecimalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cValorBooleanoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Operador:
		//	VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano;
		public ParserRule getRule() { return rule; }

		//VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableID
		public RuleCall getVariableIDParserRuleCall_0() { return cVariableIDParserRuleCall_0; }

		//ConstCadena
		public RuleCall getConstCadenaParserRuleCall_1() { return cConstCadenaParserRuleCall_1; }

		//Caracter
		public RuleCall getCaracterParserRuleCall_2() { return cCaracterParserRuleCall_2; }

		//NumeroEntero
		public RuleCall getNumeroEnteroParserRuleCall_3() { return cNumeroEnteroParserRuleCall_3; }

		//NumeroDecimal
		public RuleCall getNumeroDecimalParserRuleCall_4() { return cNumeroDecimalParserRuleCall_4; }

		//ValorBooleano
		public RuleCall getValorBooleanoParserRuleCall_5() { return cValorBooleanoParserRuleCall_5; }
	}

	public class CaracterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caracter");
		private final Assignment cContenidoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContenidoCARTerminalRuleCall_0 = (RuleCall)cContenidoAssignment.eContents().get(0);
		
		//Caracter:
		//	contenido=CAR;
		public ParserRule getRule() { return rule; }

		//contenido=CAR
		public Assignment getContenidoAssignment() { return cContenidoAssignment; }

		//CAR
		public RuleCall getContenidoCARTerminalRuleCall_0() { return cContenidoCARTerminalRuleCall_0; }
	}

	public class ValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "valor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLlamadaFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstCadenaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumeroEnteroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumeroDecimalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOperacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValorBooleanoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCaracterParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//valor:
		//	LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter;
		public ParserRule getRule() { return rule; }

		//LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter
		public Alternatives getAlternatives() { return cAlternatives; }

		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_0() { return cLlamadaFuncionParserRuleCall_0; }

		//VariableID
		public RuleCall getVariableIDParserRuleCall_1() { return cVariableIDParserRuleCall_1; }

		//ConstCadena
		public RuleCall getConstCadenaParserRuleCall_2() { return cConstCadenaParserRuleCall_2; }

		//NumeroEntero
		public RuleCall getNumeroEnteroParserRuleCall_3() { return cNumeroEnteroParserRuleCall_3; }

		//NumeroDecimal
		public RuleCall getNumeroDecimalParserRuleCall_4() { return cNumeroDecimalParserRuleCall_4; }

		//operacion
		public RuleCall getOperacionParserRuleCall_5() { return cOperacionParserRuleCall_5; }

		//ValorBooleano
		public RuleCall getValorBooleanoParserRuleCall_6() { return cValorBooleanoParserRuleCall_6; }

		//Caracter
		public RuleCall getCaracterParserRuleCall_7() { return cCaracterParserRuleCall_7; }
	}

	public class InicioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inicio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInicioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclaracionvariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_2_0_0 = (RuleCall)cDeclaracionvariableAssignment_2_0.eContents().get(0);
		private final Assignment cDeclaracionvariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_2_1_0 = (RuleCall)cDeclaracionvariableAssignment_2_1.eContents().get(0);
		private final Keyword cInicioKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTieneAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTieneSentenciasParserRuleCall_4_0_0 = (RuleCall)cTieneAssignment_4_0.eContents().get(0);
		private final Assignment cTieneAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTieneSentenciasParserRuleCall_4_1_0 = (RuleCall)cTieneAssignment_4_1.eContents().get(0);
		private final Keyword cFin_inicioKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Inicio:
		//	{Inicio} "var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
		//	(tiene+=Sentencias tiene+=Sentencias*)? "fin_inicio";
		public ParserRule getRule() { return rule; }

		//{Inicio} "var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
		//(tiene+=Sentencias tiene+=Sentencias*)? "fin_inicio"
		public Group getGroup() { return cGroup; }

		//{Inicio}
		public Action getInicioAction_0() { return cInicioAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//(declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)?
		public Group getGroup_2() { return cGroup_2; }

		//declaracionvariable+=DeclaracionVariable
		public Assignment getDeclaracionvariableAssignment_2_0() { return cDeclaracionvariableAssignment_2_0; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_2_0_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_2_0_0; }

		//declaracionvariable+=DeclaracionVariable*
		public Assignment getDeclaracionvariableAssignment_2_1() { return cDeclaracionvariableAssignment_2_1; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_2_1_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_2_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_3() { return cInicioKeyword_3; }

		//(tiene+=Sentencias tiene+=Sentencias*)?
		public Group getGroup_4() { return cGroup_4; }

		//tiene+=Sentencias
		public Assignment getTieneAssignment_4_0() { return cTieneAssignment_4_0; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_4_0_0() { return cTieneSentenciasParserRuleCall_4_0_0; }

		//tiene+=Sentencias*
		public Assignment getTieneAssignment_4_1() { return cTieneAssignment_4_1; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_4_1_0() { return cTieneSentenciasParserRuleCall_4_1_0; }

		//"fin_inicio"
		public Keyword getFin_inicioKeyword_5() { return cFin_inicioKeyword_5; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DeclaracionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaracionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTieneIDsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTieneIDsVariableParserRuleCall_2_0 = (RuleCall)cTieneIDsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTieneIDsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTieneIDsVariableParserRuleCall_3_1_0 = (RuleCall)cTieneIDsAssignment_3_1.eContents().get(0);
		
		//DeclaracionVariable:
		//	tipo=TipoVariable+ ":" tieneIDs+=Variable ("," tieneIDs+=Variable)*;
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable+ ":" tieneIDs+=Variable ("," tieneIDs+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable+
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//tieneIDs+=Variable
		public Assignment getTieneIDsAssignment_2() { return cTieneIDsAssignment_2; }

		//Variable
		public RuleCall getTieneIDsVariableParserRuleCall_2_0() { return cTieneIDsVariableParserRuleCall_2_0; }

		//("," tieneIDs+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//tieneIDs+=Variable
		public Assignment getTieneIDsAssignment_3_1() { return cTieneIDsAssignment_3_1; }

		//Variable
		public RuleCall getTieneIDsVariableParserRuleCall_3_1_0() { return cTieneIDsVariableParserRuleCall_3_1_0; }
	}

	public class LlamadaFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LlamadaFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperadorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperadorOperadorParserRuleCall_2_0_0 = (RuleCall)cOperadorAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOperadorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperadorOperadorParserRuleCall_2_1_1_0 = (RuleCall)cOperadorAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadaFuncion:
		//	nombre=EString "(" (operador+=Operador ("," operador+=Operador)*)? ")";
		public ParserRule getRule() { return rule; }

		//nombre=EString "(" (operador+=Operador ("," operador+=Operador)*)? ")"
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(operador+=Operador ("," operador+=Operador)*)?
		public Group getGroup_2() { return cGroup_2; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2_0() { return cOperadorAssignment_2_0; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_0_0() { return cOperadorOperadorParserRuleCall_2_0_0; }

		//("," operador+=Operador)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2_1_1() { return cOperadorAssignment_2_1_1; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_1_1_0() { return cOperadorOperadorParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asignacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvalueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvalueEStringParserRuleCall_0_0 = (RuleCall)cLvalueAssignment_0.eContents().get(0);
		private final Assignment cMatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatMATRIZTerminalRuleCall_1_0 = (RuleCall)cMatAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperadorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperadorValorParserRuleCall_3_0 = (RuleCall)cOperadorAssignment_3.eContents().get(0);
		
		//Asignacion:
		//	lvalue=EString Mat+=MATRIZ* "=" operador=valor;
		public ParserRule getRule() { return rule; }

		//lvalue=EString Mat+=MATRIZ* "=" operador=valor
		public Group getGroup() { return cGroup; }

		//lvalue=EString
		public Assignment getLvalueAssignment_0() { return cLvalueAssignment_0; }

		//EString
		public RuleCall getLvalueEStringParserRuleCall_0_0() { return cLvalueEStringParserRuleCall_0_0; }

		//Mat+=MATRIZ*
		public Assignment getMatAssignment_1() { return cMatAssignment_1; }

		//MATRIZ
		public RuleCall getMatMATRIZTerminalRuleCall_1_0() { return cMatMATRIZTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//operador=valor
		public Assignment getOperadorAssignment_3() { return cOperadorAssignment_3; }

		//valor
		public RuleCall getOperadorValorParserRuleCall_3_0() { return cOperadorValorParserRuleCall_3_0; }
	}

	public class EscribirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Escribir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEscribirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperadorParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperadorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperadorOperadorParserRuleCall_3_1_0 = (RuleCall)cOperadorAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Escribir:
		//	"escribir" "(" operador+=Operador ("," operador+=Operador)* ")";
		public ParserRule getRule() { return rule; }

		//"escribir" "(" operador+=Operador ("," operador+=Operador)* ")"
		public Group getGroup() { return cGroup; }

		//"escribir"
		public Keyword getEscribirKeyword_0() { return cEscribirKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_0() { return cOperadorOperadorParserRuleCall_2_0; }

		//("," operador+=Operador)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//operador+=Operador
		public Assignment getOperadorAssignment_3_1() { return cOperadorAssignment_3_1; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_3_1_0() { return cOperadorOperadorParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableIDParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Leer:
		//	"leer" "(" variable=VariableID ")";
		public ParserRule getRule() { return rule; }

		//"leer" "(" variable=VariableID ")"
		public Group getGroup() { return cGroup; }

		//"leer"
		public Keyword getLeerKeyword_0() { return cLeerKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=VariableID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VariableID
		public RuleCall getVariableVariableIDParserRuleCall_2_0() { return cVariableVariableIDParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Si");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cEntoncesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Assignment cSinoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSinoSinoParserRuleCall_4_0 = (RuleCall)cSinoAssignment_4.eContents().get(0);
		private final Keyword cFinSiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Si:
		//	"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? sino=Sino? "fin si";
		public ParserRule getRule() { return rule; }

		//"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? sino=Sino? "fin si"
		public Group getGroup() { return cGroup; }

		//"si"
		public Keyword getSiKeyword_0() { return cSiKeyword_0; }

		//valor=valor
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//valor
		public RuleCall getValorValorParserRuleCall_1_0() { return cValorValorParserRuleCall_1_0; }

		//"entonces"
		public Keyword getEntoncesKeyword_2() { return cEntoncesKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//sino=Sino?
		public Assignment getSinoAssignment_4() { return cSinoAssignment_4; }

		//Sino
		public RuleCall getSinoSinoParserRuleCall_4_0() { return cSinoSinoParserRuleCall_4_0; }

		//"fin si"
		public Keyword getFinSiKeyword_5() { return cFinSiKeyword_5; }
	}

	public class MientrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mientras");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMientrasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cHacerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Keyword cFin_mientrasKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mientras:
		//	"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
		public ParserRule getRule() { return rule; }

		//"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras"
		public Group getGroup() { return cGroup; }

		//"mientras"
		public Keyword getMientrasKeyword_0() { return cMientrasKeyword_0; }

		//valor=valor
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//valor
		public RuleCall getValorValorParserRuleCall_1_0() { return cValorValorParserRuleCall_1_0; }

		//"hacer"
		public Keyword getHacerKeyword_2() { return cHacerKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//"fin_mientras"
		public Keyword getFin_mientrasKeyword_4() { return cFin_mientrasKeyword_4; }
	}

	public class RepetirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "repetir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSentenciasAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_0_0 = (RuleCall)cSentenciasAssignment_1_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_1_0 = (RuleCall)cSentenciasAssignment_1_1.eContents().get(0);
		private final Keyword cHasta_queKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorValorParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		
		//repetir:
		//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor;
		public ParserRule getRule() { return rule; }

		//"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor
		public Group getGroup() { return cGroup; }

		//"repetir"
		public Keyword getRepetirKeyword_0() { return cRepetirKeyword_0; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_1() { return cGroup_1; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_1_0() { return cSentenciasAssignment_1_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_0_0() { return cSentenciasSentenciasParserRuleCall_1_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_1_1() { return cSentenciasAssignment_1_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_1_0() { return cSentenciasSentenciasParserRuleCall_1_1_0; }

		//"hasta_que"
		public Keyword getHasta_queKeyword_2() { return cHasta_queKeyword_2; }

		//valor=valor
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_0() { return cValorValorParserRuleCall_3_0; }
	}

	public class DesdeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "desde");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAsignacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsignacionAsignacionParserRuleCall_1_0 = (RuleCall)cAsignacionAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorValorParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_0_0 = (RuleCall)cSentenciasAssignment_5_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_1_0 = (RuleCall)cSentenciasAssignment_5_1.eContents().get(0);
		private final Keyword cFin_desdeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//desde:
		//	"desde" asignacion=Asignacion "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
		//	"fin_desde";
		public ParserRule getRule() { return rule; }

		//"desde" asignacion=Asignacion "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_desde"
		public Group getGroup() { return cGroup; }

		//"desde"
		public Keyword getDesdeKeyword_0() { return cDesdeKeyword_0; }

		//asignacion=Asignacion
		public Assignment getAsignacionAssignment_1() { return cAsignacionAssignment_1; }

		//Asignacion
		public RuleCall getAsignacionAsignacionParserRuleCall_1_0() { return cAsignacionAsignacionParserRuleCall_1_0; }

		//"hasta"
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }

		//valor=valor
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_0() { return cValorValorParserRuleCall_3_0; }

		//"hacer"
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_5() { return cGroup_5; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_5_0() { return cSentenciasAssignment_5_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_0_0() { return cSentenciasSentenciasParserRuleCall_5_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_5_1() { return cSentenciasAssignment_5_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_1_0() { return cSentenciasSentenciasParserRuleCall_5_1_0; }

		//"fin_desde"
		public Keyword getFin_desdeKeyword_6() { return cFin_desdeKeyword_6; }
	}

	public class IncrementoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "incremento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Assignment cSsignoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSsignoIncParserRuleCall_1_0 = (RuleCall)cSsignoAssignment_1.eContents().get(0);
		
		//incremento:
		//	nombre=EString ssigno=inc;
		public ParserRule getRule() { return rule; }

		//nombre=EString ssigno=inc
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//ssigno=inc
		public Assignment getSsignoAssignment_1() { return cSsignoAssignment_1; }

		//inc
		public RuleCall getSsignoIncParserRuleCall_1_0() { return cSsignoIncParserRuleCall_1_0; }
	}

	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnteroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCaracterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCadenaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TipoVariable:
		//	"entero" | "caracter" | "real" | "logico" | "cadena";
		public ParserRule getRule() { return rule; }

		//"entero" | "caracter" | "real" | "logico" | "cadena"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"entero"
		public Keyword getEnteroKeyword_0() { return cEnteroKeyword_0; }

		//"caracter"
		public Keyword getCaracterKeyword_1() { return cCaracterKeyword_1; }

		//"real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"logico"
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }

		//"cadena"
		public Keyword getCadenaKeyword_4() { return cCadenaKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Assignment cMatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatMATRIZTerminalRuleCall_1_0 = (RuleCall)cMatAssignment_1.eContents().get(0);
		
		//Variable:
		//	nombre=EString Mat+=MATRIZ*;
		public ParserRule getRule() { return rule; }

		//nombre=EString Mat+=MATRIZ*
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//Mat+=MATRIZ*
		public Assignment getMatAssignment_1() { return cMatAssignment_1; }

		//MATRIZ
		public RuleCall getMatMATRIZTerminalRuleCall_1_0() { return cMatMATRIZTerminalRuleCall_1_0; }
	}

	public class VariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Assignment cMatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatMATRIZTerminalRuleCall_1_0 = (RuleCall)cMatAssignment_1.eContents().get(0);
		
		//VariableID:
		//	nombre=EString Mat+=MATRIZ*;
		public ParserRule getRule() { return rule; }

		//nombre=EString Mat+=MATRIZ*
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//Mat+=MATRIZ*
		public Assignment getMatAssignment_1() { return cMatAssignment_1; }

		//MATRIZ
		public RuleCall getMatMATRIZTerminalRuleCall_1_0() { return cMatMATRIZTerminalRuleCall_1_0; }
	}

	public class ConstCadenaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstCadena");
		private final Assignment cContenidoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContenidoCADTerminalRuleCall_0 = (RuleCall)cContenidoAssignment.eContents().get(0);
		
		//ConstCadena:
		//	contenido=CAD;
		public ParserRule getRule() { return rule; }

		//contenido=CAD
		public Assignment getContenidoAssignment() { return cContenidoAssignment; }

		//CAD
		public RuleCall getContenidoCADTerminalRuleCall_0() { return cContenidoCADTerminalRuleCall_0; }
	}

	public class NumeroEnteroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumeroEntero");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//NumeroEntero:
		//	valor=EInt;
		public ParserRule getRule() { return rule; }

		//valor=EInt
		public Assignment getValorAssignment() { return cValorAssignment; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0() { return cValorEIntParserRuleCall_0; }
	}

	public class NumeroDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumeroDecimal");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorEFloatParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//NumeroDecimal:
		//	valor=EFloat;
		public ParserRule getRule() { return rule; }

		//valor=EFloat
		public Assignment getValorAssignment() { return cValorAssignment; }

		//EFloat
		public RuleCall getValorEFloatParserRuleCall_0() { return cValorEFloatParserRuleCall_0; }
	}

	public class ValorBooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorBooleano");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorBooleanoParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//ValorBooleano:
		//	valor=booleano;
		public ParserRule getRule() { return rule; }

		//valor=booleano
		public Assignment getValorAssignment() { return cValorAssignment; }

		//booleano
		public RuleCall getValorBooleanoParserRuleCall_0() { return cValorBooleanoParserRuleCall_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class BooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleano");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerdaderoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalsoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//booleano:
		//	"verdadero" | "falso";
		public ParserRule getRule() { return rule; }

		//"verdadero" | "falso"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"verdadero"
		public Keyword getVerdaderoKeyword_0() { return cVerdaderoKeyword_0; }

		//"falso"
		public Keyword getFalsoKeyword_1() { return cFalsoKeyword_1; }
	}

	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOp_izqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp_izqOperando_izqParserRuleCall_1_0 = (RuleCall)cOp_izqAssignment_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSigno_opSignoParserRuleCall_2_0 = (RuleCall)cSigno_opAssignment_2.eContents().get(0);
		private final Assignment cOp_derAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp_derOperando_derParserRuleCall_3_0 = (RuleCall)cOp_derAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//operacion:
		//	"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")";
		public ParserRule getRule() { return rule; }

		//"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//op_izq=operando_izq
		public Assignment getOp_izqAssignment_1() { return cOp_izqAssignment_1; }

		//operando_izq
		public RuleCall getOp_izqOperando_izqParserRuleCall_1_0() { return cOp_izqOperando_izqParserRuleCall_1_0; }

		//signo_op=signo
		public Assignment getSigno_opAssignment_2() { return cSigno_opAssignment_2; }

		//signo
		public RuleCall getSigno_opSignoParserRuleCall_2_0() { return cSigno_opSignoParserRuleCall_2_0; }

		//op_der=operando_der
		public Assignment getOp_derAssignment_3() { return cOp_derAssignment_3; }

		//operando_der
		public RuleCall getOp_derOperando_derParserRuleCall_3_0() { return cOp_derOperando_derParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SignoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cYKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
		//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!=";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//"y"
		public Keyword getYKeyword_8() { return cYKeyword_8; }

		//"o"
		public Keyword getOKeyword_9() { return cOKeyword_9; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_10() { return cEqualsSignEqualsSignKeyword_10; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_11() { return cExclamationMarkEqualsSignKeyword_11; }
	}

	public class Operando_izqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operando_izq");
		private final Assignment cOper_izqAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOper_izqValorParserRuleCall_0 = (RuleCall)cOper_izqAssignment.eContents().get(0);
		
		//operando_izq:
		//	oper_izq=valor;
		public ParserRule getRule() { return rule; }

		//oper_izq=valor
		public Assignment getOper_izqAssignment() { return cOper_izqAssignment; }

		//valor
		public RuleCall getOper_izqValorParserRuleCall_0() { return cOper_izqValorParserRuleCall_0; }
	}

	public class Operando_derElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operando_der");
		private final Assignment cOper_derAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOper_derValorParserRuleCall_0 = (RuleCall)cOper_derAssignment.eContents().get(0);
		
		//operando_der:
		//	oper_der=valor;
		public ParserRule getRule() { return rule; }

		//oper_der=valor
		public Assignment getOper_derAssignment() { return cOper_derAssignment; }

		//valor
		public RuleCall getOper_derValorParserRuleCall_0() { return cOper_derValorParserRuleCall_0; }
	}

	public class SinoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sino");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSinoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSinoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_0_0 = (RuleCall)cSentenciasAssignment_2_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_1_0 = (RuleCall)cSentenciasAssignment_2_1.eContents().get(0);
		
		//Sino:
		//	{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)?;
		public ParserRule getRule() { return rule; }

		//{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup() { return cGroup; }

		//{Sino}
		public Action getSinoAction_0() { return cSinoAction_0; }

		//"sino"
		public Keyword getSinoKeyword_1() { return cSinoKeyword_1; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_2() { return cGroup_2; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_2_0() { return cSentenciasAssignment_2_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_0_0() { return cSentenciasSentenciasParserRuleCall_2_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_2_1() { return cSentenciasAssignment_2_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_1_0() { return cSentenciasSentenciasParserRuleCall_2_1_0; }
	}

	public class IncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / inc:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class ParametroFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametroFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPasoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPasoTipoPasoParserRuleCall_0_0 = (RuleCall)cPasoAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoVariableParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//ParametroFuncion:
		//	paso=TipoPaso tipo=TipoVariable+ ":" variable=Variable;
		public ParserRule getRule() { return rule; }

		//paso=TipoPaso tipo=TipoVariable+ ":" variable=Variable
		public Group getGroup() { return cGroup; }

		//paso=TipoPaso
		public Assignment getPasoAssignment_0() { return cPasoAssignment_0; }

		//TipoPaso
		public RuleCall getPasoTipoPasoParserRuleCall_0_0() { return cPasoTipoPasoParserRuleCall_0_0; }

		//tipo=TipoVariable+
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_1_0() { return cTipoTipoVariableParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}

	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreEStringParserRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametrofuncionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_0_0 = (RuleCall)cParametrofuncionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0 = (RuleCall)cParametrofuncionAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cDeclaracionvariableAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_7_0_0 = (RuleCall)cDeclaracionvariableAssignment_7_0.eContents().get(0);
		private final Assignment cDeclaracionvariableAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_7_1_0 = (RuleCall)cDeclaracionvariableAssignment_7_1.eContents().get(0);
		private final Keyword cInicioKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cSentenciasAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_9_0_0 = (RuleCall)cSentenciasAssignment_9_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_9_1_0 = (RuleCall)cSentenciasAssignment_9_1.eContents().get(0);
		private final Keyword cDevolverKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cDevuelveAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDevuelveValorParserRuleCall_12_0 = (RuleCall)cDevuelveAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cFin_funcionKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Funcion:
		//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//	parametrofuncion+=ParametroFuncion)*)? ")" "var" (declaracionvariable+=DeclaracionVariable
		//	declaracionvariable+=DeclaracionVariable*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? "devolver" "("
		//	devuelve=valor ")" "fin_funcion";
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ")" "var" (declaracionvariable+=DeclaracionVariable
		//declaracionvariable+=DeclaracionVariable*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? "devolver" "("
		//devuelve=valor ")" "fin_funcion"
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//"funcion"
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=EString
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_2_0() { return cNombreEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_0() { return cParametrofuncionAssignment_4_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_1_1() { return cParametrofuncionAssignment_4_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"var"
		public Keyword getVarKeyword_6() { return cVarKeyword_6; }

		//(declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)?
		public Group getGroup_7() { return cGroup_7; }

		//declaracionvariable+=DeclaracionVariable
		public Assignment getDeclaracionvariableAssignment_7_0() { return cDeclaracionvariableAssignment_7_0; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_7_0_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_7_0_0; }

		//declaracionvariable+=DeclaracionVariable*
		public Assignment getDeclaracionvariableAssignment_7_1() { return cDeclaracionvariableAssignment_7_1; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_7_1_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_7_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_8() { return cInicioKeyword_8; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_9() { return cGroup_9; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_9_0() { return cSentenciasAssignment_9_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_9_0_0() { return cSentenciasSentenciasParserRuleCall_9_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_9_1() { return cSentenciasAssignment_9_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_9_1_0() { return cSentenciasSentenciasParserRuleCall_9_1_0; }

		//"devolver"
		public Keyword getDevolverKeyword_10() { return cDevolverKeyword_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }

		//devuelve=valor
		public Assignment getDevuelveAssignment_12() { return cDevuelveAssignment_12; }

		//valor
		public RuleCall getDevuelveValorParserRuleCall_12_0() { return cDevuelveValorParserRuleCall_12_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }

		//"fin_funcion"
		public Keyword getFin_funcionKeyword_14() { return cFin_funcionKeyword_14; }
	}

	public class ProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cDeclaracionvariableAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_6_0_0 = (RuleCall)cDeclaracionvariableAssignment_6_0.eContents().get(0);
		private final Assignment cDeclaracionvariableAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDeclaracionvariableDeclaracionVariableParserRuleCall_6_1_0 = (RuleCall)cDeclaracionvariableAssignment_6_1.eContents().get(0);
		private final Keyword cInicioKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cSentenciasAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_8_0_0 = (RuleCall)cSentenciasAssignment_8_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_8_1_0 = (RuleCall)cSentenciasAssignment_8_1.eContents().get(0);
		private final Keyword cFin_procedimientoKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Procedimiento:
		//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		//	")" "var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
		//	(sentencias+=Sentencias sentencias+=Sentencias*)? "fin_procedimiento";
		public ParserRule getRule() { return rule; }

		//"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		//"var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
		//(sentencias+=Sentencias sentencias+=Sentencias*)? "fin_procedimiento"
		public Group getGroup() { return cGroup; }

		//"procedimiento"
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"var"
		public Keyword getVarKeyword_5() { return cVarKeyword_5; }

		//(declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)?
		public Group getGroup_6() { return cGroup_6; }

		//declaracionvariable+=DeclaracionVariable
		public Assignment getDeclaracionvariableAssignment_6_0() { return cDeclaracionvariableAssignment_6_0; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_6_0_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_6_0_0; }

		//declaracionvariable+=DeclaracionVariable*
		public Assignment getDeclaracionvariableAssignment_6_1() { return cDeclaracionvariableAssignment_6_1; }

		//DeclaracionVariable
		public RuleCall getDeclaracionvariableDeclaracionVariableParserRuleCall_6_1_0() { return cDeclaracionvariableDeclaracionVariableParserRuleCall_6_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_7() { return cInicioKeyword_7; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_8() { return cGroup_8; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_8_0() { return cSentenciasAssignment_8_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_8_0_0() { return cSentenciasSentenciasParserRuleCall_8_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_8_1() { return cSentenciasAssignment_8_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_8_1_0() { return cSentenciasSentenciasParserRuleCall_8_1_0; }

		//"fin_procedimiento"
		public Keyword getFin_procedimientoKeyword_9() { return cFin_procedimientoKeyword_9; }
	}

	public class TipoPasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoPaso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
		//	"E" | "E/S" | "S";
		public ParserRule getRule() { return rule; }

		//"E" | "E/S" | "S"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"E"
		public Keyword getEKeyword_0() { return cEKeyword_0; }

		//"E/S"
		public Keyword getESKeyword_1() { return cESKeyword_1; }

		//"S"
		public Keyword getSKeyword_2() { return cSKeyword_2; }
	}
	
	
	private CodigoElements pCodigo;
	private SubprocesoElements pSubproceso;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private SentenciasElements pSentencias;
	private OperadorElements pOperador;
	private CaracterElements pCaracter;
	private ValorElements pValor;
	private InicioElements pInicio;
	private EStringElements pEString;
	private DeclaracionVariableElements pDeclaracionVariable;
	private LlamadaFuncionElements pLlamadaFuncion;
	private AsignacionElements pAsignacion;
	private EscribirElements pEscribir;
	private LeerElements pLeer;
	private SiElements pSi;
	private MientrasElements pMientras;
	private RepetirElements pRepetir;
	private DesdeElements pDesde;
	private IncrementoElements pIncremento;
	private TipoVariableElements pTipoVariable;
	private VariableElements pVariable;
	private VariableIDElements pVariableID;
	private TerminalRule tCAD;
	private TerminalRule tCAR;
	private TerminalRule tMATRIZ;
	private ConstCadenaElements pConstCadena;
	private NumeroEnteroElements pNumeroEntero;
	private NumeroDecimalElements pNumeroDecimal;
	private ValorBooleanoElements pValorBooleano;
	private EIntElements pEInt;
	private EFloatElements pEFloat;
	private BooleanoElements pBooleano;
	private OperacionElements pOperacion;
	private SignoElements pSigno;
	private Operando_izqElements pOperando_izq;
	private Operando_derElements pOperando_der;
	private SinoElements pSino;
	private IncElements pInc;
	private ParametroFuncionElements pParametroFuncion;
	private FuncionElements pFuncion;
	private ProcedimientoElements pProcedimiento;
	private TipoPasoElements pTipoPaso;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Codigo:
	//	(funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio;
	public CodigoElements getCodigoAccess() {
		return (pCodigo != null) ? pCodigo : (pCodigo = new CodigoElements());
	}
	
	public ParserRule getCodigoRule() {
		return getCodigoAccess().getRule();
	}

	//Subproceso:
	//	Funcion | Procedimiento;
	public SubprocesoElements getSubprocesoAccess() {
		return (pSubproceso != null) ? pSubproceso : (pSubproceso = new SubprocesoElements());
	}
	
	public ParserRule getSubprocesoRule() {
		return getSubprocesoAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//Sentencias:
	//	LlamadaFuncion | Asignacion | Escribir | Leer | Si | mientras | repetir | desde | incremento;
	public SentenciasElements getSentenciasAccess() {
		return (pSentencias != null) ? pSentencias : (pSentencias = new SentenciasElements());
	}
	
	public ParserRule getSentenciasRule() {
		return getSentenciasAccess().getRule();
	}

	//Operador:
	//	VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano;
	public OperadorElements getOperadorAccess() {
		return (pOperador != null) ? pOperador : (pOperador = new OperadorElements());
	}
	
	public ParserRule getOperadorRule() {
		return getOperadorAccess().getRule();
	}

	//Caracter:
	//	contenido=CAR;
	public CaracterElements getCaracterAccess() {
		return (pCaracter != null) ? pCaracter : (pCaracter = new CaracterElements());
	}
	
	public ParserRule getCaracterRule() {
		return getCaracterAccess().getRule();
	}

	//valor:
	//	LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter;
	public ValorElements getValorAccess() {
		return (pValor != null) ? pValor : (pValor = new ValorElements());
	}
	
	public ParserRule getValorRule() {
		return getValorAccess().getRule();
	}

	//Inicio:
	//	{Inicio} "var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
	//	(tiene+=Sentencias tiene+=Sentencias*)? "fin_inicio";
	public InicioElements getInicioAccess() {
		return (pInicio != null) ? pInicio : (pInicio = new InicioElements());
	}
	
	public ParserRule getInicioRule() {
		return getInicioAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DeclaracionVariable:
	//	tipo=TipoVariable+ ":" tieneIDs+=Variable ("," tieneIDs+=Variable)*;
	public DeclaracionVariableElements getDeclaracionVariableAccess() {
		return (pDeclaracionVariable != null) ? pDeclaracionVariable : (pDeclaracionVariable = new DeclaracionVariableElements());
	}
	
	public ParserRule getDeclaracionVariableRule() {
		return getDeclaracionVariableAccess().getRule();
	}

	//LlamadaFuncion:
	//	nombre=EString "(" (operador+=Operador ("," operador+=Operador)*)? ")";
	public LlamadaFuncionElements getLlamadaFuncionAccess() {
		return (pLlamadaFuncion != null) ? pLlamadaFuncion : (pLlamadaFuncion = new LlamadaFuncionElements());
	}
	
	public ParserRule getLlamadaFuncionRule() {
		return getLlamadaFuncionAccess().getRule();
	}

	//Asignacion:
	//	lvalue=EString Mat+=MATRIZ* "=" operador=valor;
	public AsignacionElements getAsignacionAccess() {
		return (pAsignacion != null) ? pAsignacion : (pAsignacion = new AsignacionElements());
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//Escribir:
	//	"escribir" "(" operador+=Operador ("," operador+=Operador)* ")";
	public EscribirElements getEscribirAccess() {
		return (pEscribir != null) ? pEscribir : (pEscribir = new EscribirElements());
	}
	
	public ParserRule getEscribirRule() {
		return getEscribirAccess().getRule();
	}

	//Leer:
	//	"leer" "(" variable=VariableID ")";
	public LeerElements getLeerAccess() {
		return (pLeer != null) ? pLeer : (pLeer = new LeerElements());
	}
	
	public ParserRule getLeerRule() {
		return getLeerAccess().getRule();
	}

	//Si:
	//	"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? sino=Sino? "fin si";
	public SiElements getSiAccess() {
		return (pSi != null) ? pSi : (pSi = new SiElements());
	}
	
	public ParserRule getSiRule() {
		return getSiAccess().getRule();
	}

	//mientras:
	//	"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
	public MientrasElements getMientrasAccess() {
		return (pMientras != null) ? pMientras : (pMientras = new MientrasElements());
	}
	
	public ParserRule getMientrasRule() {
		return getMientrasAccess().getRule();
	}

	//repetir:
	//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor;
	public RepetirElements getRepetirAccess() {
		return (pRepetir != null) ? pRepetir : (pRepetir = new RepetirElements());
	}
	
	public ParserRule getRepetirRule() {
		return getRepetirAccess().getRule();
	}

	//desde:
	//	"desde" asignacion=Asignacion "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
	//	"fin_desde";
	public DesdeElements getDesdeAccess() {
		return (pDesde != null) ? pDesde : (pDesde = new DesdeElements());
	}
	
	public ParserRule getDesdeRule() {
		return getDesdeAccess().getRule();
	}

	//incremento:
	//	nombre=EString ssigno=inc;
	public IncrementoElements getIncrementoAccess() {
		return (pIncremento != null) ? pIncremento : (pIncremento = new IncrementoElements());
	}
	
	public ParserRule getIncrementoRule() {
		return getIncrementoAccess().getRule();
	}

	//TipoVariable:
	//	"entero" | "caracter" | "real" | "logico" | "cadena";
	public TipoVariableElements getTipoVariableAccess() {
		return (pTipoVariable != null) ? pTipoVariable : (pTipoVariable = new TipoVariableElements());
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}

	//Variable:
	//	nombre=EString Mat+=MATRIZ*;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableID:
	//	nombre=EString Mat+=MATRIZ*;
	public VariableIDElements getVariableIDAccess() {
		return (pVariableID != null) ? pVariableID : (pVariableID = new VariableIDElements());
	}
	
	public ParserRule getVariableIDRule() {
		return getVariableIDAccess().getRule();
	}

	//terminal CAD:
	//	"\"" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9")* "\"";
	public TerminalRule getCADRule() {
		return (tCAD != null) ? tCAD : (tCAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAD"));
	} 

	//terminal CAR:
	//	"\'" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9") "\'";
	public TerminalRule getCARRule() {
		return (tCAR != null) ? tCAR : (tCAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAR"));
	} 

	//terminal MATRIZ:
	//	"[" ("a".."z" | "A".."Z" | "0".."9")* ("--" | "++")? "]";
	public TerminalRule getMATRIZRule() {
		return (tMATRIZ != null) ? tMATRIZ : (tMATRIZ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MATRIZ"));
	} 

	//ConstCadena:
	//	contenido=CAD;
	public ConstCadenaElements getConstCadenaAccess() {
		return (pConstCadena != null) ? pConstCadena : (pConstCadena = new ConstCadenaElements());
	}
	
	public ParserRule getConstCadenaRule() {
		return getConstCadenaAccess().getRule();
	}

	//NumeroEntero:
	//	valor=EInt;
	public NumeroEnteroElements getNumeroEnteroAccess() {
		return (pNumeroEntero != null) ? pNumeroEntero : (pNumeroEntero = new NumeroEnteroElements());
	}
	
	public ParserRule getNumeroEnteroRule() {
		return getNumeroEnteroAccess().getRule();
	}

	//NumeroDecimal:
	//	valor=EFloat;
	public NumeroDecimalElements getNumeroDecimalAccess() {
		return (pNumeroDecimal != null) ? pNumeroDecimal : (pNumeroDecimal = new NumeroDecimalElements());
	}
	
	public ParserRule getNumeroDecimalRule() {
		return getNumeroDecimalAccess().getRule();
	}

	//ValorBooleano:
	//	valor=booleano;
	public ValorBooleanoElements getValorBooleanoAccess() {
		return (pValorBooleano != null) ? pValorBooleano : (pValorBooleano = new ValorBooleanoElements());
	}
	
	public ParserRule getValorBooleanoRule() {
		return getValorBooleanoAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EFloat returns ecore::EFloat:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EFloatElements getEFloatAccess() {
		return (pEFloat != null) ? pEFloat : (pEFloat = new EFloatElements());
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	//booleano:
	//	"verdadero" | "falso";
	public BooleanoElements getBooleanoAccess() {
		return (pBooleano != null) ? pBooleano : (pBooleano = new BooleanoElements());
	}
	
	public ParserRule getBooleanoRule() {
		return getBooleanoAccess().getRule();
	}

	//operacion:
	//	"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")";
	public OperacionElements getOperacionAccess() {
		return (pOperacion != null) ? pOperacion : (pOperacion = new OperacionElements());
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
	//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!=";
	public SignoElements getSignoAccess() {
		return (pSigno != null) ? pSigno : (pSigno = new SignoElements());
	}
	
	public ParserRule getSignoRule() {
		return getSignoAccess().getRule();
	}

	//operando_izq:
	//	oper_izq=valor;
	public Operando_izqElements getOperando_izqAccess() {
		return (pOperando_izq != null) ? pOperando_izq : (pOperando_izq = new Operando_izqElements());
	}
	
	public ParserRule getOperando_izqRule() {
		return getOperando_izqAccess().getRule();
	}

	//operando_der:
	//	oper_der=valor;
	public Operando_derElements getOperando_derAccess() {
		return (pOperando_der != null) ? pOperando_der : (pOperando_der = new Operando_derElements());
	}
	
	public ParserRule getOperando_derRule() {
		return getOperando_derAccess().getRule();
	}

	//Sino:
	//	{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)?;
	public SinoElements getSinoAccess() {
		return (pSino != null) ? pSino : (pSino = new SinoElements());
	}
	
	public ParserRule getSinoRule() {
		return getSinoAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / inc:
	//	"++" | "--";
	public IncElements getIncAccess() {
		return (pInc != null) ? pInc : (pInc = new IncElements());
	}
	
	public ParserRule getIncRule() {
		return getIncAccess().getRule();
	}

	//ParametroFuncion:
	//	paso=TipoPaso tipo=TipoVariable+ ":" variable=Variable;
	public ParametroFuncionElements getParametroFuncionAccess() {
		return (pParametroFuncion != null) ? pParametroFuncion : (pParametroFuncion = new ParametroFuncionElements());
	}
	
	public ParserRule getParametroFuncionRule() {
		return getParametroFuncionAccess().getRule();
	}

	//Funcion:
	//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
	//	parametrofuncion+=ParametroFuncion)*)? ")" "var" (declaracionvariable+=DeclaracionVariable
	//	declaracionvariable+=DeclaracionVariable*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? "devolver" "("
	//	devuelve=valor ")" "fin_funcion";
	public FuncionElements getFuncionAccess() {
		return (pFuncion != null) ? pFuncion : (pFuncion = new FuncionElements());
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}

	//Procedimiento:
	//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
	//	")" "var" (declaracionvariable+=DeclaracionVariable declaracionvariable+=DeclaracionVariable*)? "inicio"
	//	(sentencias+=Sentencias sentencias+=Sentencias*)? "fin_procedimiento";
	public ProcedimientoElements getProcedimientoAccess() {
		return (pProcedimiento != null) ? pProcedimiento : (pProcedimiento = new ProcedimientoElements());
	}
	
	public ParserRule getProcedimientoRule() {
		return getProcedimientoAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
	//	"E" | "E/S" | "S";
	public TipoPasoElements getTipoPasoAccess() {
		return (pTipoPaso != null) ? pTipoPaso : (pTipoPaso = new TipoPasoElements());
	}
	
	public ParserRule getTipoPasoRule() {
		return getTipoPasoAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
