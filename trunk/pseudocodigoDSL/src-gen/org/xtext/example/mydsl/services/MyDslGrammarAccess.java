/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodigoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Codigo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgoritmoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComentariosAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComentariosComentarioParserRuleCall_2_0_0 = (RuleCall)cComentariosAssignment_2_0.eContents().get(0);
		private final Assignment cComentariosAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComentariosComentarioParserRuleCall_2_1_0 = (RuleCall)cComentariosAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cConstantesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cConstantesConstantesParserRuleCall_3_1_0_0 = (RuleCall)cConstantesAssignment_3_1_0.eContents().get(0);
		private final Assignment cConstantesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConstantesConstantesParserRuleCall_3_1_1_0 = (RuleCall)cConstantesAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTipoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cTipocomplejoAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_4_1_0_0 = (RuleCall)cTipocomplejoAssignment_4_1_0.eContents().get(0);
		private final Assignment cTipocomplejoAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cTipocomplejoTipoComplejoParserRuleCall_4_1_1_0 = (RuleCall)cTipocomplejoAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cGlobalAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cGlobalDeclaracionParserRuleCall_5_1_0_0 = (RuleCall)cGlobalAssignment_5_1_0.eContents().get(0);
		private final Assignment cGlobalAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cGlobalDeclaracionParserRuleCall_5_1_1_0 = (RuleCall)cGlobalAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFuncionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFuncionSubprocesoParserRuleCall_6_0_0 = (RuleCall)cFuncionAssignment_6_0.eContents().get(0);
		private final Assignment cFuncionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFuncionSubprocesoParserRuleCall_6_1_0 = (RuleCall)cFuncionAssignment_6_1.eContents().get(0);
		private final Assignment cTieneAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTieneInicioParserRuleCall_7_0 = (RuleCall)cTieneAssignment_7.eContents().get(0);
		private final Keyword cFin_algoritmoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Codigo:
		//	"Algoritmo" EString (comentarios+=Comentario comentarios+=Comentario*)? ("const" (constantes+=Constantes
		//	constantes+=Constantes*)?)? ("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var"
		//	(global+=Declaracion global+=Declaracion*)?)? (funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio
		//	"fin_algoritmo";
		public ParserRule getRule() { return rule; }

		//"Algoritmo" EString (comentarios+=Comentario comentarios+=Comentario*)? ("const" (constantes+=Constantes
		//constantes+=Constantes*)?)? ("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var"
		//(global+=Declaracion global+=Declaracion*)?)? (funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio "fin_algoritmo"
		public Group getGroup() { return cGroup; }

		//"Algoritmo"
		public Keyword getAlgoritmoKeyword_0() { return cAlgoritmoKeyword_0; }

		//EString
		public RuleCall getEStringParserRuleCall_1() { return cEStringParserRuleCall_1; }

		//(comentarios+=Comentario comentarios+=Comentario*)?
		public Group getGroup_2() { return cGroup_2; }

		//comentarios+=Comentario
		public Assignment getComentariosAssignment_2_0() { return cComentariosAssignment_2_0; }

		//Comentario
		public RuleCall getComentariosComentarioParserRuleCall_2_0_0() { return cComentariosComentarioParserRuleCall_2_0_0; }

		//comentarios+=Comentario*
		public Assignment getComentariosAssignment_2_1() { return cComentariosAssignment_2_1; }

		//Comentario
		public RuleCall getComentariosComentarioParserRuleCall_2_1_0() { return cComentariosComentarioParserRuleCall_2_1_0; }

		//("const" (constantes+=Constantes constantes+=Constantes*)?)?
		public Group getGroup_3() { return cGroup_3; }

		//"const"
		public Keyword getConstKeyword_3_0() { return cConstKeyword_3_0; }

		//(constantes+=Constantes constantes+=Constantes*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//constantes+=Constantes
		public Assignment getConstantesAssignment_3_1_0() { return cConstantesAssignment_3_1_0; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_3_1_0_0() { return cConstantesConstantesParserRuleCall_3_1_0_0; }

		//constantes+=Constantes*
		public Assignment getConstantesAssignment_3_1_1() { return cConstantesAssignment_3_1_1; }

		//Constantes
		public RuleCall getConstantesConstantesParserRuleCall_3_1_1_0() { return cConstantesConstantesParserRuleCall_3_1_1_0; }

		//("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)?
		public Group getGroup_4() { return cGroup_4; }

		//"tipo"
		public Keyword getTipoKeyword_4_0() { return cTipoKeyword_4_0; }

		//(tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//tipocomplejo+=TipoComplejo
		public Assignment getTipocomplejoAssignment_4_1_0() { return cTipocomplejoAssignment_4_1_0; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_4_1_0_0() { return cTipocomplejoTipoComplejoParserRuleCall_4_1_0_0; }

		//tipocomplejo+=TipoComplejo*
		public Assignment getTipocomplejoAssignment_4_1_1() { return cTipocomplejoAssignment_4_1_1; }

		//TipoComplejo
		public RuleCall getTipocomplejoTipoComplejoParserRuleCall_4_1_1_0() { return cTipocomplejoTipoComplejoParserRuleCall_4_1_1_0; }

		//("var" (global+=Declaracion global+=Declaracion*)?)?
		public Group getGroup_5() { return cGroup_5; }

		//"var"
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }

		//(global+=Declaracion global+=Declaracion*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//global+=Declaracion
		public Assignment getGlobalAssignment_5_1_0() { return cGlobalAssignment_5_1_0; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_5_1_0_0() { return cGlobalDeclaracionParserRuleCall_5_1_0_0; }

		//global+=Declaracion*
		public Assignment getGlobalAssignment_5_1_1() { return cGlobalAssignment_5_1_1; }

		//Declaracion
		public RuleCall getGlobalDeclaracionParserRuleCall_5_1_1_0() { return cGlobalDeclaracionParserRuleCall_5_1_1_0; }

		//(funcion+=Subproceso funcion+=Subproceso*)?
		public Group getGroup_6() { return cGroup_6; }

		//funcion+=Subproceso
		public Assignment getFuncionAssignment_6_0() { return cFuncionAssignment_6_0; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_6_0_0() { return cFuncionSubprocesoParserRuleCall_6_0_0; }

		//funcion+=Subproceso*
		public Assignment getFuncionAssignment_6_1() { return cFuncionAssignment_6_1; }

		//Subproceso
		public RuleCall getFuncionSubprocesoParserRuleCall_6_1_0() { return cFuncionSubprocesoParserRuleCall_6_1_0; }

		//tiene=Inicio
		public Assignment getTieneAssignment_7() { return cTieneAssignment_7; }

		//Inicio
		public RuleCall getTieneInicioParserRuleCall_7_0() { return cTieneInicioParserRuleCall_7_0; }

		//"fin_algoritmo"
		public Keyword getFin_algoritmoKeyword_8() { return cFin_algoritmoKeyword_8; }
	}

	public class ComentarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comentario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMensajeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMensajeCOMENTTerminalRuleCall_1_0 = (RuleCall)cMensajeAssignment_1.eContents().get(0);
		
		//Comentario:
		//	"//" mensaje=COMENT;
		public ParserRule getRule() { return rule; }

		//"//" mensaje=COMENT
		public Group getGroup() { return cGroup; }

		//"//"
		public Keyword getSolidusSolidusKeyword_0() { return cSolidusSolidusKeyword_0; }

		//mensaje=COMENT
		public Assignment getMensajeAssignment_1() { return cMensajeAssignment_1; }

		//COMENT
		public RuleCall getMensajeCOMENTTerminalRuleCall_1_0() { return cMensajeCOMENTTerminalRuleCall_1_0; }
	}

	public class TipoComplejoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoComplejo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatrizParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegistroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArchivoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumeradoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubrangoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TipoComplejo:
		//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
		public ParserRule getRule() { return rule; }

		//Vector | Matriz | Registro | Archivo | Enumerado | Subrango
		public Alternatives getAlternatives() { return cAlternatives; }

		//Vector
		public RuleCall getVectorParserRuleCall_0() { return cVectorParserRuleCall_0; }

		//Matriz
		public RuleCall getMatrizParserRuleCall_1() { return cMatrizParserRuleCall_1; }

		//Registro
		public RuleCall getRegistroParserRuleCall_2() { return cRegistroParserRuleCall_2; }

		//Archivo
		public RuleCall getArchivoParserRuleCall_3() { return cArchivoParserRuleCall_3; }

		//Enumerado
		public RuleCall getEnumeradoParserRuleCall_4() { return cEnumeradoParserRuleCall_4; }

		//Subrango
		public RuleCall getSubrangoParserRuleCall_5() { return cSubrangoParserRuleCall_5; }
	}

	public class SubprocesoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subproceso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedimientoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subproceso:
		//	Funcion | Procedimiento;
		public ParserRule getRule() { return rule; }

		//Funcion | Procedimiento
		public Alternatives getAlternatives() { return cAlternatives; }

		//Funcion
		public RuleCall getFuncionParserRuleCall_0() { return cFuncionParserRuleCall_0; }

		//Procedimiento
		public RuleCall getProcedimientoParserRuleCall_1() { return cProcedimientoParserRuleCall_1; }
	}

	public class SentenciasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentencias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLlamadaFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEscribirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNegacionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBloqueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValorComplejoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFuncionFicheroAbrirParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFuncionFicheroCerrarParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Sentencias:
		//	LlamadaFuncion | Asignacion | Escribir | Leer | negacion | Bloque | ValorComplejo | FuncionFicheroAbrir |
		//	FuncionFicheroCerrar;
		public ParserRule getRule() { return rule; }

		//LlamadaFuncion | Asignacion | Escribir | Leer | negacion | Bloque | ValorComplejo | FuncionFicheroAbrir |
		//FuncionFicheroCerrar
		public Alternatives getAlternatives() { return cAlternatives; }

		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_0() { return cLlamadaFuncionParserRuleCall_0; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_1() { return cAsignacionParserRuleCall_1; }

		//Escribir
		public RuleCall getEscribirParserRuleCall_2() { return cEscribirParserRuleCall_2; }

		//Leer
		public RuleCall getLeerParserRuleCall_3() { return cLeerParserRuleCall_3; }

		//negacion
		public RuleCall getNegacionParserRuleCall_4() { return cNegacionParserRuleCall_4; }

		//Bloque
		public RuleCall getBloqueParserRuleCall_5() { return cBloqueParserRuleCall_5; }

		//ValorComplejo
		public RuleCall getValorComplejoParserRuleCall_6() { return cValorComplejoParserRuleCall_6; }

		//FuncionFicheroAbrir
		public RuleCall getFuncionFicheroAbrirParserRuleCall_7() { return cFuncionFicheroAbrirParserRuleCall_7; }

		//FuncionFicheroCerrar
		public RuleCall getFuncionFicheroCerrarParserRuleCall_8() { return cFuncionFicheroCerrarParserRuleCall_8; }
	}

	public class BloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bloque");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMientrasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepetirParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDesdeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSegunParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Bloque:
		//	Si | mientras | repetir | desde | segun;
		public ParserRule getRule() { return rule; }

		//Si | mientras | repetir | desde | segun
		public Alternatives getAlternatives() { return cAlternatives; }

		//Si
		public RuleCall getSiParserRuleCall_0() { return cSiParserRuleCall_0; }

		//mientras
		public RuleCall getMientrasParserRuleCall_1() { return cMientrasParserRuleCall_1; }

		//repetir
		public RuleCall getRepetirParserRuleCall_2() { return cRepetirParserRuleCall_2; }

		//desde
		public RuleCall getDesdeParserRuleCall_3() { return cDesdeParserRuleCall_3; }

		//segun
		public RuleCall getSegunParserRuleCall_4() { return cSegunParserRuleCall_4; }
	}

	public class DeclaracionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaracion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaracionVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracionPropiaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaracion:
		//	DeclaracionVariable | DeclaracionPropia;
		public ParserRule getRule() { return rule; }

		//DeclaracionVariable | DeclaracionPropia
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaracionVariable
		public RuleCall getDeclaracionVariableParserRuleCall_0() { return cDeclaracionVariableParserRuleCall_0; }

		//DeclaracionPropia
		public RuleCall getDeclaracionPropiaParserRuleCall_1() { return cDeclaracionPropiaParserRuleCall_1; }
	}

	public class InternasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Internas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreNombreInternaParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperadorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperadorOperadorParserRuleCall_2_0_0 = (RuleCall)cOperadorAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOperadorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperadorOperadorParserRuleCall_2_1_1_0 = (RuleCall)cOperadorAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Internas:
		//	nombre=NombreInterna "(" (operador+=Operador ("," operador+=Operador)*) ")";
		public ParserRule getRule() { return rule; }

		//nombre=NombreInterna "(" (operador+=Operador ("," operador+=Operador)*) ")"
		public Group getGroup() { return cGroup; }

		//nombre=NombreInterna
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//NombreInterna
		public RuleCall getNombreNombreInternaParserRuleCall_0_0() { return cNombreNombreInternaParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operador+=Operador ("," operador+=Operador)*
		public Group getGroup_2() { return cGroup_2; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2_0() { return cOperadorAssignment_2_0; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_0_0() { return cOperadorOperadorParserRuleCall_2_0_0; }

		//("," operador+=Operador)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2_1_1() { return cOperadorAssignment_2_1_1; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_1_1_0() { return cOperadorOperadorParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FuncionFicheroAbrirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncionFicheroAbrir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbrirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableVariableIDParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cModoAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cModoModoAperturaParserRuleCall_2_2_0 = (RuleCall)cModoAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cVariableAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cVariableOperadorParserRuleCall_2_4_0 = (RuleCall)cVariableAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroAbrir:
		//	"abrir" "(" (variable+=VariableID "," modo=ModoApertura "," variable+=Operador) ")";
		public ParserRule getRule() { return rule; }

		//"abrir" "(" (variable+=VariableID "," modo=ModoApertura "," variable+=Operador) ")"
		public Group getGroup() { return cGroup; }

		//"abrir"
		public Keyword getAbrirKeyword_0() { return cAbrirKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable+=VariableID "," modo=ModoApertura "," variable+=Operador
		public Group getGroup_2() { return cGroup_2; }

		//variable+=VariableID
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//VariableID
		public RuleCall getVariableVariableIDParserRuleCall_2_0_0() { return cVariableVariableIDParserRuleCall_2_0_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//modo=ModoApertura
		public Assignment getModoAssignment_2_2() { return cModoAssignment_2_2; }

		//ModoApertura
		public RuleCall getModoModoAperturaParserRuleCall_2_2_0() { return cModoModoAperturaParserRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//variable+=Operador
		public Assignment getVariableAssignment_2_4() { return cVariableAssignment_2_4; }

		//Operador
		public RuleCall getVariableOperadorParserRuleCall_2_4_0() { return cVariableOperadorParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FuncionFicheroCerrarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncionFicheroCerrar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCerrarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableIDParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuncionFicheroCerrar:
		//	"cerrar" "(" variable=VariableID ")";
		public ParserRule getRule() { return rule; }

		//"cerrar" "(" variable=VariableID ")"
		public Group getGroup() { return cGroup; }

		//"cerrar"
		public Keyword getCerrarKeyword_0() { return cCerrarKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=VariableID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VariableID
		public RuleCall getVariableVariableIDParserRuleCall_2_0() { return cVariableVariableIDParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModoAperturaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModoApertura");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEscrituraKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLecturaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ModoApertura:
		//	"escritura" | "lectura";
		public ParserRule getRule() { return rule; }

		//"escritura" | "lectura"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"escritura"
		public Keyword getEscrituraKeyword_0() { return cEscrituraKeyword_0; }

		//"lectura"
		public Keyword getLecturaKeyword_1() { return cLecturaKeyword_1; }
	}

	public class NombreInternaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NombreInterna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCosKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCuadradoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExpKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLnKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSenKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSqrtKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLongitudKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConcatenaKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//NombreInterna:
		//	"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena";
		public ParserRule getRule() { return rule; }

		//"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"cos"
		public Keyword getCosKeyword_0() { return cCosKeyword_0; }

		//"cuadrado"
		public Keyword getCuadradoKeyword_1() { return cCuadradoKeyword_1; }

		//"exp"
		public Keyword getExpKeyword_2() { return cExpKeyword_2; }

		//"ln"
		public Keyword getLnKeyword_3() { return cLnKeyword_3; }

		//"log"
		public Keyword getLogKeyword_4() { return cLogKeyword_4; }

		//"sen"
		public Keyword getSenKeyword_5() { return cSenKeyword_5; }

		//"sqrt"
		public Keyword getSqrtKeyword_6() { return cSqrtKeyword_6; }

		//"longitud"
		public Keyword getLongitudKeyword_7() { return cLongitudKeyword_7; }

		//"concatena"
		public Keyword getConcatenaKeyword_8() { return cConcatenaKeyword_8; }
	}

	public class OperadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstCadenaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCaracterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumeroEnteroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumeroDecimalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cValorBooleanoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValorComplejoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Operador:
		//	VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano | ValorComplejo;
		public ParserRule getRule() { return rule; }

		//VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano | ValorComplejo
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableID
		public RuleCall getVariableIDParserRuleCall_0() { return cVariableIDParserRuleCall_0; }

		//ConstCadena
		public RuleCall getConstCadenaParserRuleCall_1() { return cConstCadenaParserRuleCall_1; }

		//Caracter
		public RuleCall getCaracterParserRuleCall_2() { return cCaracterParserRuleCall_2; }

		//NumeroEntero
		public RuleCall getNumeroEnteroParserRuleCall_3() { return cNumeroEnteroParserRuleCall_3; }

		//NumeroDecimal
		public RuleCall getNumeroDecimalParserRuleCall_4() { return cNumeroDecimalParserRuleCall_4; }

		//ValorBooleano
		public RuleCall getValorBooleanoParserRuleCall_5() { return cValorBooleanoParserRuleCall_5; }

		//ValorComplejo
		public RuleCall getValorComplejoParserRuleCall_6() { return cValorComplejoParserRuleCall_6; }
	}

	public class CaracterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caracter");
		private final Assignment cContenidoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContenidoCARTerminalRuleCall_0 = (RuleCall)cContenidoAssignment.eContents().get(0);
		
		//Caracter:
		//	contenido=CAR;
		public ParserRule getRule() { return rule; }

		//contenido=CAR
		public Assignment getContenidoAssignment() { return cContenidoAssignment; }

		//CAR
		public RuleCall getContenidoCARTerminalRuleCall_0() { return cContenidoCARTerminalRuleCall_0; }
	}

	public class ValorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "valor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLlamadaFuncionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstCadenaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumeroEnteroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumeroDecimalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOperacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValorBooleanoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCaracterParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInternasParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cUnariaParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cValorComplejoParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//valor:
		//	LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter |
		//	Internas | unaria | ValorComplejo;
		public ParserRule getRule() { return rule; }

		//LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter |
		//Internas | unaria | ValorComplejo
		public Alternatives getAlternatives() { return cAlternatives; }

		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_0() { return cLlamadaFuncionParserRuleCall_0; }

		//VariableID
		public RuleCall getVariableIDParserRuleCall_1() { return cVariableIDParserRuleCall_1; }

		//ConstCadena
		public RuleCall getConstCadenaParserRuleCall_2() { return cConstCadenaParserRuleCall_2; }

		//NumeroEntero
		public RuleCall getNumeroEnteroParserRuleCall_3() { return cNumeroEnteroParserRuleCall_3; }

		//NumeroDecimal
		public RuleCall getNumeroDecimalParserRuleCall_4() { return cNumeroDecimalParserRuleCall_4; }

		//operacion
		public RuleCall getOperacionParserRuleCall_5() { return cOperacionParserRuleCall_5; }

		//ValorBooleano
		public RuleCall getValorBooleanoParserRuleCall_6() { return cValorBooleanoParserRuleCall_6; }

		//Caracter
		public RuleCall getCaracterParserRuleCall_7() { return cCaracterParserRuleCall_7; }

		//Internas
		public RuleCall getInternasParserRuleCall_8() { return cInternasParserRuleCall_8; }

		//unaria
		public RuleCall getUnariaParserRuleCall_9() { return cUnariaParserRuleCall_9; }

		//ValorComplejo
		public RuleCall getValorComplejoParserRuleCall_10() { return cValorComplejoParserRuleCall_10; }
	}

	public class ValoresLeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "valoresLeer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValorVectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValorMatrizParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValorRegistroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//valoresLeer returns Operador:
		//	VariableID | ValorVector | ValorMatriz | ValorRegistro;
		public ParserRule getRule() { return rule; }

		//VariableID | ValorVector | ValorMatriz | ValorRegistro
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableID
		public RuleCall getVariableIDParserRuleCall_0() { return cVariableIDParserRuleCall_0; }

		//ValorVector
		public RuleCall getValorVectorParserRuleCall_1() { return cValorVectorParserRuleCall_1; }

		//ValorMatriz
		public RuleCall getValorMatrizParserRuleCall_2() { return cValorMatrizParserRuleCall_2; }

		//ValorRegistro
		public RuleCall getValorRegistroParserRuleCall_3() { return cValorRegistroParserRuleCall_3; }
	}

	public class ValorComplejoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorComplejo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValorRegistroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValorVectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValorMatrizParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValorComplejo:
		//	ValorRegistro | ValorVector | ValorMatriz;
		public ParserRule getRule() { return rule; }

		//ValorRegistro | ValorVector | ValorMatriz
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValorRegistro
		public RuleCall getValorRegistroParserRuleCall_0() { return cValorRegistroParserRuleCall_0; }

		//ValorVector
		public RuleCall getValorVectorParserRuleCall_1() { return cValorVectorParserRuleCall_1; }

		//ValorMatriz
		public RuleCall getValorMatrizParserRuleCall_2() { return cValorMatrizParserRuleCall_2; }
	}

	public class ValorMatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorMatriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNombre_matrizAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNombre_matrizEStringParserRuleCall_0_0_0 = (RuleCall)cNombre_matrizAssignment_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cIndicesAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cIndicesNumeroEnteroParserRuleCall_0_2_0_0 = (RuleCall)cIndicesAssignment_0_2_0.eContents().get(0);
		private final Assignment cIndicesAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cIndicesVariableIDParserRuleCall_0_2_1_0 = (RuleCall)cIndicesAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Assignment cIndicesAssignment_0_4_0 = (Assignment)cAlternatives_0_4.eContents().get(0);
		private final RuleCall cIndicesNumeroEnteroParserRuleCall_0_4_0_0 = (RuleCall)cIndicesAssignment_0_4_0.eContents().get(0);
		private final Assignment cIndicesAssignment_0_4_1 = (Assignment)cAlternatives_0_4.eContents().get(1);
		private final RuleCall cIndicesVariableIDParserRuleCall_0_4_1_0 = (RuleCall)cIndicesAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCampoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_1_1_0 = (RuleCall)cCampoAssignment_1_1.eContents().get(0);
		
		//ValorMatriz:
		//	(nombre_matriz=EString "[" (indices+=NumeroEntero | indices+=VariableID) "][" (indices+=NumeroEntero |
		//	indices+=VariableID) "]") ("." campo+=CampoRegistro)?;
		public ParserRule getRule() { return rule; }

		//(nombre_matriz=EString "[" (indices+=NumeroEntero | indices+=VariableID) "][" (indices+=NumeroEntero |
		//indices+=VariableID) "]") ("." campo+=CampoRegistro)?
		public Group getGroup() { return cGroup; }

		//nombre_matriz=EString "[" (indices+=NumeroEntero | indices+=VariableID) "][" (indices+=NumeroEntero |
		//indices+=VariableID) "]"
		public Group getGroup_0() { return cGroup_0; }

		//nombre_matriz=EString
		public Assignment getNombre_matrizAssignment_0_0() { return cNombre_matrizAssignment_0_0; }

		//EString
		public RuleCall getNombre_matrizEStringParserRuleCall_0_0_0() { return cNombre_matrizEStringParserRuleCall_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//indices+=NumeroEntero | indices+=VariableID
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//indices+=NumeroEntero
		public Assignment getIndicesAssignment_0_2_0() { return cIndicesAssignment_0_2_0; }

		//NumeroEntero
		public RuleCall getIndicesNumeroEnteroParserRuleCall_0_2_0_0() { return cIndicesNumeroEnteroParserRuleCall_0_2_0_0; }

		//indices+=VariableID
		public Assignment getIndicesAssignment_0_2_1() { return cIndicesAssignment_0_2_1; }

		//VariableID
		public RuleCall getIndicesVariableIDParserRuleCall_0_2_1_0() { return cIndicesVariableIDParserRuleCall_0_2_1_0; }

		//"]["
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_0_3() { return cRightSquareBracketLeftSquareBracketKeyword_0_3; }

		//indices+=NumeroEntero | indices+=VariableID
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//indices+=NumeroEntero
		public Assignment getIndicesAssignment_0_4_0() { return cIndicesAssignment_0_4_0; }

		//NumeroEntero
		public RuleCall getIndicesNumeroEnteroParserRuleCall_0_4_0_0() { return cIndicesNumeroEnteroParserRuleCall_0_4_0_0; }

		//indices+=VariableID
		public Assignment getIndicesAssignment_0_4_1() { return cIndicesAssignment_0_4_1; }

		//VariableID
		public RuleCall getIndicesVariableIDParserRuleCall_0_4_1_0() { return cIndicesVariableIDParserRuleCall_0_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }

		//("." campo+=CampoRegistro)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_1_1() { return cCampoAssignment_1_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_1_1_0() { return cCampoCampoRegistroParserRuleCall_1_1_0; }
	}

	public class ValorRegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorRegistro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombre_registroAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombre_registroEStringParserRuleCall_0_0 = (RuleCall)cNombre_registroAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCampoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_0_0 = (RuleCall)cCampoAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCampoAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_2_1_1_0 = (RuleCall)cCampoAssignment_2_1_1.eContents().get(0);
		
		//ValorRegistro:
		//	nombre_registro=EString "." (campo+=CampoRegistro ("." campo+=CampoRegistro)*);
		public ParserRule getRule() { return rule; }

		//nombre_registro=EString "." (campo+=CampoRegistro ("." campo+=CampoRegistro)*)
		public Group getGroup() { return cGroup; }

		//nombre_registro=EString
		public Assignment getNombre_registroAssignment_0() { return cNombre_registroAssignment_0; }

		//EString
		public RuleCall getNombre_registroEStringParserRuleCall_0_0() { return cNombre_registroEStringParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//campo+=CampoRegistro ("." campo+=CampoRegistro)*
		public Group getGroup_2() { return cGroup_2; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_0() { return cCampoAssignment_2_0; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_0_0() { return cCampoCampoRegistroParserRuleCall_2_0_0; }

		//("." campo+=CampoRegistro)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"."
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_2_1_1() { return cCampoAssignment_2_1_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_2_1_1_0() { return cCampoCampoRegistroParserRuleCall_2_1_1_0; }
	}

	public class ValorVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNombre_vectorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNombre_vectorEStringParserRuleCall_0_0_0 = (RuleCall)cNombre_vectorAssignment_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cIndiceAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cIndiceNumeroEnteroParserRuleCall_0_2_0_0 = (RuleCall)cIndiceAssignment_0_2_0.eContents().get(0);
		private final Assignment cIndiceAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cIndiceVariableIDParserRuleCall_0_2_1_0 = (RuleCall)cIndiceAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCampoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCampoCampoRegistroParserRuleCall_1_1_0 = (RuleCall)cCampoAssignment_1_1.eContents().get(0);
		
		//ValorVector:
		//	(nombre_vector=EString "[" (indice=NumeroEntero | indice=VariableID) "]") ("." campo+=CampoRegistro)?;
		public ParserRule getRule() { return rule; }

		//(nombre_vector=EString "[" (indice=NumeroEntero | indice=VariableID) "]") ("." campo+=CampoRegistro)?
		public Group getGroup() { return cGroup; }

		//nombre_vector=EString "[" (indice=NumeroEntero | indice=VariableID) "]"
		public Group getGroup_0() { return cGroup_0; }

		//nombre_vector=EString
		public Assignment getNombre_vectorAssignment_0_0() { return cNombre_vectorAssignment_0_0; }

		//EString
		public RuleCall getNombre_vectorEStringParserRuleCall_0_0_0() { return cNombre_vectorEStringParserRuleCall_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }

		//indice=NumeroEntero | indice=VariableID
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//indice=NumeroEntero
		public Assignment getIndiceAssignment_0_2_0() { return cIndiceAssignment_0_2_0; }

		//NumeroEntero
		public RuleCall getIndiceNumeroEnteroParserRuleCall_0_2_0_0() { return cIndiceNumeroEnteroParserRuleCall_0_2_0_0; }

		//indice=VariableID
		public Assignment getIndiceAssignment_0_2_1() { return cIndiceAssignment_0_2_1; }

		//VariableID
		public RuleCall getIndiceVariableIDParserRuleCall_0_2_1_0() { return cIndiceVariableIDParserRuleCall_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }

		//("." campo+=CampoRegistro)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//campo+=CampoRegistro
		public Assignment getCampoAssignment_1_1() { return cCampoAssignment_1_1; }

		//CampoRegistro
		public RuleCall getCampoCampoRegistroParserRuleCall_1_1_0() { return cCampoCampoRegistroParserRuleCall_1_1_0; }
	}

	public class CampoRegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CampoRegistro");
		private final Assignment cNombre_campoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombre_campoEStringParserRuleCall_0 = (RuleCall)cNombre_campoAssignment.eContents().get(0);
		
		//CampoRegistro:
		//	nombre_campo=EString;
		public ParserRule getRule() { return rule; }

		//nombre_campo=EString
		public Assignment getNombre_campoAssignment() { return cNombre_campoAssignment; }

		//EString
		public RuleCall getNombre_campoEStringParserRuleCall_0() { return cNombre_campoEStringParserRuleCall_0; }
	}

	public class TipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tipo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTipoDefinidoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTipoExistenteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Tipo:
		//	TipoDefinido | TipoExistente;
		public ParserRule getRule() { return rule; }

		//TipoDefinido | TipoExistente
		public Alternatives getAlternatives() { return cAlternatives; }

		//TipoDefinido
		public RuleCall getTipoDefinidoParserRuleCall_0() { return cTipoDefinidoParserRuleCall_0; }

		//TipoExistente
		public RuleCall getTipoExistenteParserRuleCall_1() { return cTipoExistenteParserRuleCall_1; }
	}

	public class TipoDefinidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoDefinido");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoEStringParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoDefinido:
		//	tipo=EString;
		public ParserRule getRule() { return rule; }

		//tipo=EString
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0() { return cTipoEStringParserRuleCall_0; }
	}

	public class TipoExistenteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoExistente");
		private final Assignment cTipoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTipoTipoVariableParserRuleCall_0 = (RuleCall)cTipoAssignment.eContents().get(0);
		
		//TipoExistente:
		//	tipo=TipoVariable;
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment() { return cTipoAssignment; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0() { return cTipoTipoVariableParserRuleCall_0; }
	}

	public class ConstantesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constantes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorValorParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//Constantes:
		//	variable=Variable "=" valor=valor;
		public ParserRule getRule() { return rule; }

		//variable=Variable "=" valor=valor
		public Group getGroup() { return cGroup; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valor=valor
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//valor
		public RuleCall getValorValorParserRuleCall_2_0() { return cValorValorParserRuleCall_2_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValorNumeroEnteroParserRuleCall_2_0_0 = (RuleCall)cValorAssignment_2_0.eContents().get(0);
		private final Assignment cValorAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValorVariableIDParserRuleCall_2_1_0 = (RuleCall)cValorAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTipoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTipoTipoParserRuleCall_5_0 = (RuleCall)cTipoAssignment_5.eContents().get(0);
		private final Keyword cColonSpaceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNombreAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNombreEStringParserRuleCall_7_0 = (RuleCall)cNombreAssignment_7.eContents().get(0);
		
		//Vector:
		//	"vector " "[" (valor=NumeroEntero | valor=VariableID) "]" "de" tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"vector " "[" (valor=NumeroEntero | valor=VariableID) "]" "de" tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"vector "
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor=NumeroEntero | valor=VariableID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//valor=NumeroEntero
		public Assignment getValorAssignment_2_0() { return cValorAssignment_2_0; }

		//NumeroEntero
		public RuleCall getValorNumeroEnteroParserRuleCall_2_0_0() { return cValorNumeroEnteroParserRuleCall_2_0_0; }

		//valor=VariableID
		public Assignment getValorAssignment_2_1() { return cValorAssignment_2_1; }

		//VariableID
		public RuleCall getValorVariableIDParserRuleCall_2_1_0() { return cValorVariableIDParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"de"
		public Keyword getDeKeyword_4() { return cDeKeyword_4; }

		//tipo=Tipo
		public Assignment getTipoAssignment_5() { return cTipoAssignment_5; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_5_0() { return cTipoTipoParserRuleCall_5_0; }

		//": "
		public Keyword getColonSpaceKeyword_6() { return cColonSpaceKeyword_6; }

		//nombre=EString
		public Assignment getNombreAssignment_7() { return cNombreAssignment_7; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_7_0() { return cNombreEStringParserRuleCall_7_0; }
	}

	public class MatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrizKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValorNumeroEnteroParserRuleCall_2_0_0 = (RuleCall)cValorAssignment_2_0.eContents().get(0);
		private final Assignment cValorAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValorVariableIDParserRuleCall_2_1_0 = (RuleCall)cValorAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValorAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValorNumeroEnteroParserRuleCall_4_0_0 = (RuleCall)cValorAssignment_4_0.eContents().get(0);
		private final Assignment cValorAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cValorVariableIDParserRuleCall_4_1_0 = (RuleCall)cValorAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTipoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTipoTipoParserRuleCall_7_0 = (RuleCall)cTipoAssignment_7.eContents().get(0);
		private final Keyword cColonSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNombreAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNombreEStringParserRuleCall_9_0 = (RuleCall)cNombreAssignment_9.eContents().get(0);
		
		//Matriz:
		//	"matriz " "[" (valor+=NumeroEntero | valor+=VariableID) "][" (valor+=NumeroEntero | valor+=VariableID) "]" "de"
		//	tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"matriz " "[" (valor+=NumeroEntero | valor+=VariableID) "][" (valor+=NumeroEntero | valor+=VariableID) "]" "de"
		//tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"matriz "
		public Keyword getMatrizKeyword_0() { return cMatrizKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//valor+=NumeroEntero | valor+=VariableID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//valor+=NumeroEntero
		public Assignment getValorAssignment_2_0() { return cValorAssignment_2_0; }

		//NumeroEntero
		public RuleCall getValorNumeroEnteroParserRuleCall_2_0_0() { return cValorNumeroEnteroParserRuleCall_2_0_0; }

		//valor+=VariableID
		public Assignment getValorAssignment_2_1() { return cValorAssignment_2_1; }

		//VariableID
		public RuleCall getValorVariableIDParserRuleCall_2_1_0() { return cValorVariableIDParserRuleCall_2_1_0; }

		//"]["
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_3() { return cRightSquareBracketLeftSquareBracketKeyword_3; }

		//valor+=NumeroEntero | valor+=VariableID
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//valor+=NumeroEntero
		public Assignment getValorAssignment_4_0() { return cValorAssignment_4_0; }

		//NumeroEntero
		public RuleCall getValorNumeroEnteroParserRuleCall_4_0_0() { return cValorNumeroEnteroParserRuleCall_4_0_0; }

		//valor+=VariableID
		public Assignment getValorAssignment_4_1() { return cValorAssignment_4_1; }

		//VariableID
		public RuleCall getValorVariableIDParserRuleCall_4_1_0() { return cValorVariableIDParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"de"
		public Keyword getDeKeyword_6() { return cDeKeyword_6; }

		//tipo=Tipo
		public Assignment getTipoAssignment_7() { return cTipoAssignment_7; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_7_0() { return cTipoTipoParserRuleCall_7_0; }

		//": "
		public Keyword getColonSpaceKeyword_8() { return cColonSpaceKeyword_8; }

		//nombre=EString
		public Assignment getNombreAssignment_9() { return cNombreAssignment_9; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_9_0() { return cNombreEStringParserRuleCall_9_0; }
	}

	public class RegistroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Registro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegistroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableDeclaracionParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclaracionParserRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final Keyword cFin_registroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Registro:
		//	"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro";
		public ParserRule getRule() { return rule; }

		//"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro"
		public Group getGroup() { return cGroup; }

		//"registro:"
		public Keyword getRegistroKeyword_0() { return cRegistroKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//variable+=Declaracion variable+=Declaracion*
		public Group getGroup_2() { return cGroup_2; }

		//variable+=Declaracion
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Declaracion
		public RuleCall getVariableDeclaracionParserRuleCall_2_0_0() { return cVariableDeclaracionParserRuleCall_2_0_0; }

		//variable+=Declaracion*
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//Declaracion
		public RuleCall getVariableDeclaracionParserRuleCall_2_1_0() { return cVariableDeclaracionParserRuleCall_2_1_0; }

		//"fin_registro"
		public Keyword getFin_registroKeyword_3() { return cFin_registroKeyword_3; }
	}

	public class ArchivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Archivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchivoDeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNombreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNombreEStringParserRuleCall_3_0 = (RuleCall)cNombreAssignment_3.eContents().get(0);
		
		//Archivo:
		//	"archivo de " tipo=Tipo ": " nombre=EString;
		public ParserRule getRule() { return rule; }

		//"archivo de " tipo=Tipo ": " nombre=EString
		public Group getGroup() { return cGroup; }

		//"archivo de "
		public Keyword getArchivoDeKeyword_0() { return cArchivoDeKeyword_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//nombre=EString
		public Assignment getNombreAssignment_3() { return cNombreAssignment_3; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_3_0() { return cNombreEStringParserRuleCall_3_0; }
	}

	public class EnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValorValorParserRuleCall_3_0_0 = (RuleCall)cValorAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValorAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_3_1_1_0 = (RuleCall)cValorAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumerado:
		//	nombre=EString "=" "{" (valor+=valor ("," valor+=valor)*) "}";
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" "{" (valor+=valor ("," valor+=valor)*) "}"
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//valor+=valor ("," valor+=valor)*
		public Group getGroup_3() { return cGroup_3; }

		//valor+=valor
		public Assignment getValorAssignment_3_0() { return cValorAssignment_3_0; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_0_0() { return cValorValorParserRuleCall_3_0_0; }

		//("," valor+=valor)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//valor+=valor
		public Assignment getValorAssignment_3_1_1() { return cValorAssignment_3_1_1; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_1_1_0() { return cValorValorParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubrangoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrango");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrangoNumericoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubrangoEnumeradoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subrango:
		//	SubrangoNumerico | SubrangoEnumerado;
		public ParserRule getRule() { return rule; }

		//SubrangoNumerico | SubrangoEnumerado
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubrangoNumerico
		public RuleCall getSubrangoNumericoParserRuleCall_0() { return cSubrangoNumericoParserRuleCall_0; }

		//SubrangoEnumerado
		public RuleCall getSubrangoEnumeradoParserRuleCall_1() { return cSubrangoEnumeradoParserRuleCall_1; }
	}

	public class SubrangoNumericoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubrangoNumerico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLimite_infAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimite_infEIntParserRuleCall_2_0 = (RuleCall)cLimite_infAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLimite_supAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLimite_supEIntParserRuleCall_4_0 = (RuleCall)cLimite_supAssignment_4.eContents().get(0);
		
		//SubrangoNumerico:
		//	nombre=EString "=" limite_inf=EInt ".." limite_sup=EInt;
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" limite_inf=EInt ".." limite_sup=EInt
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//limite_inf=EInt
		public Assignment getLimite_infAssignment_2() { return cLimite_infAssignment_2; }

		//EInt
		public RuleCall getLimite_infEIntParserRuleCall_2_0() { return cLimite_infEIntParserRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//limite_sup=EInt
		public Assignment getLimite_supAssignment_4() { return cLimite_supAssignment_4; }

		//EInt
		public RuleCall getLimite_supEIntParserRuleCall_4_0() { return cLimite_supEIntParserRuleCall_4_0; }
	}

	public class SubrangoEnumeradoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubrangoEnumerado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLimite_infAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimite_infEStringParserRuleCall_2_0 = (RuleCall)cLimite_infAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLimite_supAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLimite_supEStringParserRuleCall_4_0 = (RuleCall)cLimite_supAssignment_4.eContents().get(0);
		
		//SubrangoEnumerado:
		//	nombre=EString "=" limite_inf=EString ".." limite_sup=EString;
		public ParserRule getRule() { return rule; }

		//nombre=EString "=" limite_inf=EString ".." limite_sup=EString
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//limite_inf=EString
		public Assignment getLimite_infAssignment_2() { return cLimite_infAssignment_2; }

		//EString
		public RuleCall getLimite_infEStringParserRuleCall_2_0() { return cLimite_infEStringParserRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//limite_sup=EString
		public Assignment getLimite_supAssignment_4() { return cLimite_supAssignment_4; }

		//EString
		public RuleCall getLimite_supEStringParserRuleCall_4_0() { return cLimite_supEStringParserRuleCall_4_0; }
	}

	public class InicioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inicio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrincipalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInicioAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDeclaracionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_3_0_0 = (RuleCall)cDeclaracionAssignment_3_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_3_1_0 = (RuleCall)cDeclaracionAssignment_3_1.eContents().get(0);
		private final Keyword cInicioKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTieneAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTieneSentenciasParserRuleCall_5_0_0 = (RuleCall)cTieneAssignment_5_0.eContents().get(0);
		private final Assignment cTieneAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTieneSentenciasParserRuleCall_5_1_0 = (RuleCall)cTieneAssignment_5_1.eContents().get(0);
		private final Keyword cFin_inicioKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inicio:
		//	"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
		//	tiene+=Sentencias*)? "fin_inicio";
		public ParserRule getRule() { return rule; }

		//"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
		//tiene+=Sentencias*)? "fin_inicio"
		public Group getGroup() { return cGroup; }

		//"principal"
		public Keyword getPrincipalKeyword_0() { return cPrincipalKeyword_0; }

		//{Inicio}
		public Action getInicioAction_1() { return cInicioAction_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_3() { return cGroup_3; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_3_0() { return cDeclaracionAssignment_3_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_3_0_0() { return cDeclaracionDeclaracionParserRuleCall_3_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_3_1() { return cDeclaracionAssignment_3_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_3_1_0() { return cDeclaracionDeclaracionParserRuleCall_3_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_4() { return cInicioKeyword_4; }

		//(tiene+=Sentencias tiene+=Sentencias*)?
		public Group getGroup_5() { return cGroup_5; }

		//tiene+=Sentencias
		public Assignment getTieneAssignment_5_0() { return cTieneAssignment_5_0; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_5_0_0() { return cTieneSentenciasParserRuleCall_5_0_0; }

		//tiene+=Sentencias*
		public Assignment getTieneAssignment_5_1() { return cTieneAssignment_5_1; }

		//Sentencias
		public RuleCall getTieneSentenciasParserRuleCall_5_1_0() { return cTieneSentenciasParserRuleCall_5_1_0; }

		//"fin_inicio"
		public Keyword getFin_inicioKeyword_6() { return cFin_inicioKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DeclaracionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaracionVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionVariable:
		//	tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*;
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class DeclaracionPropiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaracionPropia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoEStringParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_3_1_0 = (RuleCall)cVariableAssignment_3_1.eContents().get(0);
		
		//DeclaracionPropia:
		//	tipo=EString ": " variable+=Variable ("," variable+=Variable)*;
		public ParserRule getRule() { return rule; }

		//tipo=EString ": " variable+=Variable ("," variable+=Variable)*
		public Group getGroup() { return cGroup; }

		//tipo=EString
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//EString
		public RuleCall getTipoEStringParserRuleCall_0_0() { return cTipoEStringParserRuleCall_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//variable+=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//("," variable+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_1_0() { return cVariableVariableParserRuleCall_3_1_0; }
	}

	public class LlamadaFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LlamadaFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperadorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperadorValorParserRuleCall_2_0_0 = (RuleCall)cOperadorAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOperadorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperadorValorParserRuleCall_2_1_1_0 = (RuleCall)cOperadorAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadaFuncion:
		//	nombre=EString "(" (operador+=valor ("," operador+=valor)*)? ")";
		public ParserRule getRule() { return rule; }

		//nombre=EString "(" (operador+=valor ("," operador+=valor)*)? ")"
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(operador+=valor ("," operador+=valor)*)?
		public Group getGroup_2() { return cGroup_2; }

		//operador+=valor
		public Assignment getOperadorAssignment_2_0() { return cOperadorAssignment_2_0; }

		//valor
		public RuleCall getOperadorValorParserRuleCall_2_0_0() { return cOperadorValorParserRuleCall_2_0_0; }

		//("," operador+=valor)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//operador+=valor
		public Assignment getOperadorAssignment_2_1_1() { return cOperadorAssignment_2_1_1; }

		//valor
		public RuleCall getOperadorValorParserRuleCall_2_1_1_0() { return cOperadorValorParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asignacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsignacionNormalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsignacionComplejaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Asignacion:
		//	AsignacionNormal | AsignacionCompleja;
		public ParserRule getRule() { return rule; }

		//AsignacionNormal | AsignacionCompleja
		public Alternatives getAlternatives() { return cAlternatives; }

		//AsignacionNormal
		public RuleCall getAsignacionNormalParserRuleCall_0() { return cAsignacionNormalParserRuleCall_0; }

		//AsignacionCompleja
		public RuleCall getAsignacionComplejaParserRuleCall_1() { return cAsignacionComplejaParserRuleCall_1; }
	}

	public class AsignacionNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsignacionNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvalueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvalueEStringParserRuleCall_0_0 = (RuleCall)cLvalueAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorValorParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionNormal:
		//	lvalue=EString //	 Mat+=MAT*
		//	"=" operador=valor;
		public ParserRule getRule() { return rule; }

		//lvalue=EString //	 Mat+=MAT*
		//"=" operador=valor
		public Group getGroup() { return cGroup; }

		//lvalue=EString
		public Assignment getLvalueAssignment_0() { return cLvalueAssignment_0; }

		//EString
		public RuleCall getLvalueEStringParserRuleCall_0_0() { return cLvalueEStringParserRuleCall_0_0; }

		////	 Mat+=MAT*
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operador=valor
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//valor
		public RuleCall getOperadorValorParserRuleCall_2_0() { return cOperadorValorParserRuleCall_2_0; }
	}

	public class AsignacionComplejaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsignacionCompleja");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComplejoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComplejoValorComplejoParserRuleCall_0_0 = (RuleCall)cComplejoAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorValorParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		
		//AsignacionCompleja:
		//	complejo=ValorComplejo //	Mat+=MAT*
		//	"=" operador=valor;
		public ParserRule getRule() { return rule; }

		//complejo=ValorComplejo //	Mat+=MAT*
		//"=" operador=valor
		public Group getGroup() { return cGroup; }

		//complejo=ValorComplejo
		public Assignment getComplejoAssignment_0() { return cComplejoAssignment_0; }

		//ValorComplejo
		public RuleCall getComplejoValorComplejoParserRuleCall_0_0() { return cComplejoValorComplejoParserRuleCall_0_0; }

		////	Mat+=MAT*
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//operador=valor
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//valor
		public RuleCall getOperadorValorParserRuleCall_2_0() { return cOperadorValorParserRuleCall_2_0; }
	}

	public class EscribirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Escribir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEscribirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperadorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperadorOperadorParserRuleCall_2_0 = (RuleCall)cOperadorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperadorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperadorOperadorParserRuleCall_3_1_0 = (RuleCall)cOperadorAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Escribir:
		//	"escribir" "(" operador+=Operador ("," operador+=Operador)* ")";
		public ParserRule getRule() { return rule; }

		//"escribir" "(" operador+=Operador ("," operador+=Operador)* ")"
		public Group getGroup() { return cGroup; }

		//"escribir"
		public Keyword getEscribirKeyword_0() { return cEscribirKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operador+=Operador
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_2_0() { return cOperadorOperadorParserRuleCall_2_0; }

		//("," operador+=Operador)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//operador+=Operador
		public Assignment getOperadorAssignment_3_1() { return cOperadorAssignment_3_1; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_3_1_0() { return cOperadorOperadorParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LeerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableValoresLeerParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Leer:
		//	"leer" "(" variable=valoresLeer ")";
		public ParserRule getRule() { return rule; }

		//"leer" "(" variable=valoresLeer ")"
		public Group getGroup() { return cGroup; }

		//"leer"
		public Keyword getLeerKeyword_0() { return cLeerKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=valoresLeer
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//valoresLeer
		public RuleCall getVariableValoresLeerParserRuleCall_2_0() { return cVariableValoresLeerParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Si");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cEntoncesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDevuelveDevolverParserRuleCall_4_0 = (RuleCall)cDevuelveAssignment_4.eContents().get(0);
		private final Assignment cSinoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSinoSinoParserRuleCall_5_0 = (RuleCall)cSinoAssignment_5.eContents().get(0);
		private final Keyword cFin_siKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Si:
		//	"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino? "fin_si";
		public ParserRule getRule() { return rule; }

		//"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino? "fin_si"
		public Group getGroup() { return cGroup; }

		//"si"
		public Keyword getSiKeyword_0() { return cSiKeyword_0; }

		//valor=valor
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//valor
		public RuleCall getValorValorParserRuleCall_1_0() { return cValorValorParserRuleCall_1_0; }

		//"entonces"
		public Keyword getEntoncesKeyword_2() { return cEntoncesKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_4() { return cDevuelveAssignment_4; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_4_0() { return cDevuelveDevolverParserRuleCall_4_0; }

		//sino=Sino?
		public Assignment getSinoAssignment_5() { return cSinoAssignment_5; }

		//Sino
		public RuleCall getSinoSinoParserRuleCall_5_0() { return cSinoSinoParserRuleCall_5_0; }

		//"fin_si"
		public Keyword getFin_siKeyword_6() { return cFin_siKeyword_6; }
	}

	public class MientrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mientras");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMientrasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorValorParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cHacerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSentenciasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_0_0 = (RuleCall)cSentenciasAssignment_3_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_3_1_0 = (RuleCall)cSentenciasAssignment_3_1.eContents().get(0);
		private final Keyword cFin_mientrasKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mientras:
		//	"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
		public ParserRule getRule() { return rule; }

		//"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras"
		public Group getGroup() { return cGroup; }

		//"mientras"
		public Keyword getMientrasKeyword_0() { return cMientrasKeyword_0; }

		//valor=valor
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//valor
		public RuleCall getValorValorParserRuleCall_1_0() { return cValorValorParserRuleCall_1_0; }

		//"hacer"
		public Keyword getHacerKeyword_2() { return cHacerKeyword_2; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_3() { return cGroup_3; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_3_0() { return cSentenciasAssignment_3_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_0_0() { return cSentenciasSentenciasParserRuleCall_3_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_3_1() { return cSentenciasAssignment_3_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_3_1_0() { return cSentenciasSentenciasParserRuleCall_3_1_0; }

		//"fin_mientras"
		public Keyword getFin_mientrasKeyword_4() { return cFin_mientrasKeyword_4; }
	}

	public class RepetirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "repetir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepetirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSentenciasAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_0_0 = (RuleCall)cSentenciasAssignment_1_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_1_1_0 = (RuleCall)cSentenciasAssignment_1_1.eContents().get(0);
		private final Keyword cHasta_queKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorValorParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		
		//repetir:
		//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor;
		public ParserRule getRule() { return rule; }

		//"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor
		public Group getGroup() { return cGroup; }

		//"repetir"
		public Keyword getRepetirKeyword_0() { return cRepetirKeyword_0; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_1() { return cGroup_1; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_1_0() { return cSentenciasAssignment_1_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_0_0() { return cSentenciasSentenciasParserRuleCall_1_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_1_1() { return cSentenciasAssignment_1_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_1_1_0() { return cSentenciasSentenciasParserRuleCall_1_1_0; }

		//"hasta_que"
		public Keyword getHasta_queKeyword_2() { return cHasta_queKeyword_2; }

		//valor=valor
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_0() { return cValorValorParserRuleCall_3_0; }
	}

	public class DesdeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "desde");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAsignacionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsignacionAsignacionNormalParserRuleCall_1_0 = (RuleCall)cAsignacionAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorValorParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSentenciasAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_0_0 = (RuleCall)cSentenciasAssignment_5_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_5_1_0 = (RuleCall)cSentenciasAssignment_5_1.eContents().get(0);
		private final Keyword cFin_desdeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//desde:
		//	"desde" asignacion=AsignacionNormal "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
		//	"fin_desde";
		public ParserRule getRule() { return rule; }

		//"desde" asignacion=AsignacionNormal "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
		//"fin_desde"
		public Group getGroup() { return cGroup; }

		//"desde"
		public Keyword getDesdeKeyword_0() { return cDesdeKeyword_0; }

		//asignacion=AsignacionNormal
		public Assignment getAsignacionAssignment_1() { return cAsignacionAssignment_1; }

		//AsignacionNormal
		public RuleCall getAsignacionAsignacionNormalParserRuleCall_1_0() { return cAsignacionAsignacionNormalParserRuleCall_1_0; }

		//"hasta"
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }

		//valor=valor
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }

		//valor
		public RuleCall getValorValorParserRuleCall_3_0() { return cValorValorParserRuleCall_3_0; }

		//"hacer"
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_5() { return cGroup_5; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_5_0() { return cSentenciasAssignment_5_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_0_0() { return cSentenciasSentenciasParserRuleCall_5_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_5_1() { return cSentenciasAssignment_5_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_5_1_0() { return cSentenciasSentenciasParserRuleCall_5_1_0; }

		//"fin_desde"
		public Keyword getFin_desdeKeyword_6() { return cFin_desdeKeyword_6; }
	}

	public class CasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caso");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperadorOperadorParserRuleCall_0_0 = (RuleCall)cOperadorAssignment_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_0_0 = (RuleCall)cSentenciasAssignment_2_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_1_0 = (RuleCall)cSentenciasAssignment_2_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveDevolverParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		
		//Caso:
		//	operador=Operador ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
		public ParserRule getRule() { return rule; }

		//operador=Operador ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//operador=Operador
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }

		//Operador
		public RuleCall getOperadorOperadorParserRuleCall_0_0() { return cOperadorOperadorParserRuleCall_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_1() { return cColonSpaceKeyword_1; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_2() { return cGroup_2; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_2_0() { return cSentenciasAssignment_2_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_0_0() { return cSentenciasSentenciasParserRuleCall_2_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_2_1() { return cSentenciasAssignment_2_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_1_0() { return cSentenciasSentenciasParserRuleCall_2_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_3_0() { return cDevuelveDevolverParserRuleCall_3_0; }
	}

	public class SegunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "segun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegun_seaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorValorParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHacerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCasoAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cCasoCasoParserRuleCall_5_0_0 = (RuleCall)cCasoAssignment_5_0.eContents().get(0);
		private final Assignment cCasoAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCasoCasoParserRuleCall_5_1_0 = (RuleCall)cCasoAssignment_5_1.eContents().get(0);
		private final Keyword cEn_otro_casoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cSentenciasAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_7_0_0 = (RuleCall)cSentenciasAssignment_7_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_7_1_0 = (RuleCall)cSentenciasAssignment_7_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDevuelveDevolverParserRuleCall_8_0 = (RuleCall)cDevuelveAssignment_8.eContents().get(0);
		private final Keyword cFin_segunKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//segun:
		//	"segun_sea" "(" valor=valor ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
		//	sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun";
		public ParserRule getRule() { return rule; }

		//"segun_sea" "(" valor=valor ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
		//sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun"
		public Group getGroup() { return cGroup; }

		//"segun_sea"
		public Keyword getSegun_seaKeyword_0() { return cSegun_seaKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//valor=valor
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//valor
		public RuleCall getValorValorParserRuleCall_2_0() { return cValorValorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"hacer"
		public Keyword getHacerKeyword_4() { return cHacerKeyword_4; }

		//(caso+=Caso caso+=Caso*)?
		public Group getGroup_5() { return cGroup_5; }

		//caso+=Caso
		public Assignment getCasoAssignment_5_0() { return cCasoAssignment_5_0; }

		//Caso
		public RuleCall getCasoCasoParserRuleCall_5_0_0() { return cCasoCasoParserRuleCall_5_0_0; }

		//caso+=Caso*
		public Assignment getCasoAssignment_5_1() { return cCasoAssignment_5_1; }

		//Caso
		public RuleCall getCasoCasoParserRuleCall_5_1_0() { return cCasoCasoParserRuleCall_5_1_0; }

		//"en_otro_caso:"
		public Keyword getEn_otro_casoKeyword_6() { return cEn_otro_casoKeyword_6; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_7() { return cGroup_7; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_7_0() { return cSentenciasAssignment_7_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_7_0_0() { return cSentenciasSentenciasParserRuleCall_7_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_7_1() { return cSentenciasAssignment_7_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_7_1_0() { return cSentenciasSentenciasParserRuleCall_7_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_8() { return cDevuelveAssignment_8; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_8_0() { return cDevuelveDevolverParserRuleCall_8_0; }

		//"fin_segun"
		public Keyword getFin_segunKeyword_9() { return cFin_segunKeyword_9; }
	}

	public class NegacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "negacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreEStringParserRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Assignment cSsignoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSsignoNegParserRuleCall_1_0 = (RuleCall)cSsignoAssignment_1.eContents().get(0);
		
		//negacion:
		//	nombre=EString ssigno=neg;
		public ParserRule getRule() { return rule; }

		//nombre=EString ssigno=neg
		public Group getGroup() { return cGroup; }

		//nombre=EString
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0_0() { return cNombreEStringParserRuleCall_0_0; }

		//ssigno=neg
		public Assignment getSsignoAssignment_1() { return cSsignoAssignment_1; }

		//neg
		public RuleCall getSsignoNegParserRuleCall_1_0() { return cSsignoNegParserRuleCall_1_0; }
	}

	public class UnariaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unaria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSsignoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSsignoNegParserRuleCall_1_0 = (RuleCall)cSsignoAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableValorParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//unaria:
		//	"(" ssigno=neg variable=valor ")";
		public ParserRule getRule() { return rule; }

		//"(" ssigno=neg variable=valor ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ssigno=neg
		public Assignment getSsignoAssignment_1() { return cSsignoAssignment_1; }

		//neg
		public RuleCall getSsignoNegParserRuleCall_1_0() { return cSsignoNegParserRuleCall_1_0; }

		//variable=valor
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//valor
		public RuleCall getVariableValorParserRuleCall_2_0() { return cVariableValorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnteroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCaracterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCadenaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TipoVariable:
		//	"entero" | "caracter" | "real" | "logico" | "cadena";
		public ParserRule getRule() { return rule; }

		//"entero" | "caracter" | "real" | "logico" | "cadena"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"entero"
		public Keyword getEnteroKeyword_0() { return cEnteroKeyword_0; }

		//"caracter"
		public Keyword getCaracterKeyword_1() { return cCaracterKeyword_1; }

		//"real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"logico"
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }

		//"cadena"
		public Keyword getCadenaKeyword_4() { return cCadenaKeyword_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_0 = (RuleCall)cNombreAssignment.eContents().get(0);
		
		//Variable:
		//	nombre=EString;
		public ParserRule getRule() { return rule; }

		//nombre=EString
		public Assignment getNombreAssignment() { return cNombreAssignment; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0() { return cNombreEStringParserRuleCall_0; }
	}

	public class VariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableID");
		private final Assignment cNombreAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_0 = (RuleCall)cNombreAssignment.eContents().get(0);
		
		////	 Mat+=MAT*;
		//VariableID:
		//	nombre=EString;
		public ParserRule getRule() { return rule; }

		//nombre=EString
		public Assignment getNombreAssignment() { return cNombreAssignment; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_0() { return cNombreEStringParserRuleCall_0; }
	}

	public class ConstCadenaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstCadena");
		private final Assignment cContenidoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContenidoCADTerminalRuleCall_0 = (RuleCall)cContenidoAssignment.eContents().get(0);
		
		////terminal MAT: 
		////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
		//ConstCadena:
		//	contenido=CAD;
		public ParserRule getRule() { return rule; }

		//contenido=CAD
		public Assignment getContenidoAssignment() { return cContenidoAssignment; }

		//CAD
		public RuleCall getContenidoCADTerminalRuleCall_0() { return cContenidoCADTerminalRuleCall_0; }
	}

	public class NumeroEnteroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumeroEntero");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorEIntParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//NumeroEntero:
		//	valor=EInt;
		public ParserRule getRule() { return rule; }

		//valor=EInt
		public Assignment getValorAssignment() { return cValorAssignment; }

		//EInt
		public RuleCall getValorEIntParserRuleCall_0() { return cValorEIntParserRuleCall_0; }
	}

	public class NumeroDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumeroDecimal");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorEFloatParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//NumeroDecimal:
		//	valor=EFloat;
		public ParserRule getRule() { return rule; }

		//valor=EFloat
		public Assignment getValorAssignment() { return cValorAssignment; }

		//EFloat
		public RuleCall getValorEFloatParserRuleCall_0() { return cValorEFloatParserRuleCall_0; }
	}

	public class ValorBooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorBooleano");
		private final Assignment cValorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValorBooleanoParserRuleCall_0 = (RuleCall)cValorAssignment.eContents().get(0);
		
		//ValorBooleano:
		//	valor=booleano;
		public ParserRule getRule() { return rule; }

		//valor=booleano
		public Assignment getValorAssignment() { return cValorAssignment; }

		//booleano
		public RuleCall getValorBooleanoParserRuleCall_0() { return cValorBooleanoParserRuleCall_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}

	public class BooleanoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleano");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerdaderoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalsoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//booleano:
		//	"verdadero" | "falso";
		public ParserRule getRule() { return rule; }

		//"verdadero" | "falso"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"verdadero"
		public Keyword getVerdaderoKeyword_0() { return cVerdaderoKeyword_0; }

		//"falso"
		public Keyword getFalsoKeyword_1() { return cFalsoKeyword_1; }
	}

	public class OperacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOp_izqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOp_izqOperando_izqParserRuleCall_1_0 = (RuleCall)cOp_izqAssignment_1.eContents().get(0);
		private final Assignment cSigno_opAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSigno_opSignoParserRuleCall_2_0 = (RuleCall)cSigno_opAssignment_2.eContents().get(0);
		private final Assignment cOp_derAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp_derOperando_derParserRuleCall_3_0 = (RuleCall)cOp_derAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//operacion:
		//	"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")";
		public ParserRule getRule() { return rule; }

		//"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//op_izq=operando_izq
		public Assignment getOp_izqAssignment_1() { return cOp_izqAssignment_1; }

		//operando_izq
		public RuleCall getOp_izqOperando_izqParserRuleCall_1_0() { return cOp_izqOperando_izqParserRuleCall_1_0; }

		//signo_op=signo
		public Assignment getSigno_opAssignment_2() { return cSigno_opAssignment_2; }

		//signo
		public RuleCall getSigno_opSignoParserRuleCall_2_0() { return cSigno_opSignoParserRuleCall_2_0; }

		//op_der=operando_der
		public Assignment getOp_derAssignment_3() { return cOp_derAssignment_3; }

		//operando_der
		public RuleCall getOp_derOperando_derParserRuleCall_3_0() { return cOp_derOperando_derParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SignoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cYKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
		//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!=";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//"y"
		public Keyword getYKeyword_8() { return cYKeyword_8; }

		//"o"
		public Keyword getOKeyword_9() { return cOKeyword_9; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_10() { return cEqualsSignEqualsSignKeyword_10; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_11() { return cExclamationMarkEqualsSignKeyword_11; }
	}

	public class Operando_izqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operando_izq");
		private final Assignment cOper_izqAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOper_izqValorParserRuleCall_0 = (RuleCall)cOper_izqAssignment.eContents().get(0);
		
		//operando_izq:
		//	oper_izq=valor;
		public ParserRule getRule() { return rule; }

		//oper_izq=valor
		public Assignment getOper_izqAssignment() { return cOper_izqAssignment; }

		//valor
		public RuleCall getOper_izqValorParserRuleCall_0() { return cOper_izqValorParserRuleCall_0; }
	}

	public class Operando_derElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operando_der");
		private final Assignment cOper_derAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOper_derValorParserRuleCall_0 = (RuleCall)cOper_derAssignment.eContents().get(0);
		
		//operando_der:
		//	oper_der=valor;
		public ParserRule getRule() { return rule; }

		//oper_der=valor
		public Assignment getOper_derAssignment() { return cOper_derAssignment; }

		//valor
		public RuleCall getOper_derValorParserRuleCall_0() { return cOper_derValorParserRuleCall_0; }
	}

	public class SinoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sino");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSinoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSinoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSentenciasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_0_0 = (RuleCall)cSentenciasAssignment_2_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_2_1_0 = (RuleCall)cSentenciasAssignment_2_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveDevolverParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		
		//Sino:
		//	{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
		public ParserRule getRule() { return rule; }

		//{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		public Group getGroup() { return cGroup; }

		//{Sino}
		public Action getSinoAction_0() { return cSinoAction_0; }

		//"sino"
		public Keyword getSinoKeyword_1() { return cSinoKeyword_1; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_2() { return cGroup_2; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_2_0() { return cSentenciasAssignment_2_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_0_0() { return cSentenciasSentenciasParserRuleCall_2_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_2_1() { return cSentenciasAssignment_2_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_2_1_0() { return cSentenciasSentenciasParserRuleCall_2_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_3_0() { return cDevuelveDevolverParserRuleCall_3_0; }
	}

	public class DevolverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Devolver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDevolverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevolverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDevuelveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevuelveValorParserRuleCall_3_0 = (RuleCall)cDevuelveAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Devolver:
		//	{Devolver} "devolver" "(" devuelve=valor ")";
		public ParserRule getRule() { return rule; }

		//{Devolver} "devolver" "(" devuelve=valor ")"
		public Group getGroup() { return cGroup; }

		//{Devolver}
		public Action getDevolverAction_0() { return cDevolverAction_0; }

		//"devolver"
		public Keyword getDevolverKeyword_1() { return cDevolverKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//devuelve=valor
		public Assignment getDevuelveAssignment_3() { return cDevuelveAssignment_3; }

		//valor
		public RuleCall getDevuelveValorParserRuleCall_3_0() { return cDevuelveValorParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "neg");
		private final Keyword cNoKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / neg:
		//	"no";
		public ParserRule getRule() { return rule; }

		//"no"
		public Keyword getNoKeyword() { return cNoKeyword; }
	}

	public class ParametroFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametroFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPasoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPasoTipoPasoParserRuleCall_0_0 = (RuleCall)cPasoAssignment_0.eContents().get(0);
		private final Assignment cTipoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoTipoParserRuleCall_1_0 = (RuleCall)cTipoAssignment_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		
		//ParametroFuncion:
		//	paso=TipoPaso tipo=Tipo ": " variable=Variable;
		public ParserRule getRule() { return rule; }

		//paso=TipoPaso tipo=Tipo ": " variable=Variable
		public Group getGroup() { return cGroup; }

		//paso=TipoPaso
		public Assignment getPasoAssignment_0() { return cPasoAssignment_0; }

		//TipoPaso
		public RuleCall getPasoTipoPasoParserRuleCall_0_0() { return cPasoTipoPasoParserRuleCall_0_0; }

		//tipo=Tipo
		public Assignment getTipoAssignment_1() { return cTipoAssignment_1; }

		//Tipo
		public RuleCall getTipoTipoParserRuleCall_1_0() { return cTipoTipoParserRuleCall_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
	}

	public class FuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Funcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTipoVariableParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Keyword cFuncionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreEStringParserRuleCall_2_0 = (RuleCall)cNombreAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametrofuncionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_0_0 = (RuleCall)cParametrofuncionAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0 = (RuleCall)cParametrofuncionAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cConstKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTipoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cDeclaracionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_9_0_0 = (RuleCall)cDeclaracionAssignment_9_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_9_1_0 = (RuleCall)cDeclaracionAssignment_9_1.eContents().get(0);
		private final Keyword cInicioKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cSentenciasAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_11_0_0 = (RuleCall)cSentenciasAssignment_11_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_11_1_0 = (RuleCall)cSentenciasAssignment_11_1.eContents().get(0);
		private final Assignment cDevuelveAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDevuelveDevolverParserRuleCall_12_0 = (RuleCall)cDevuelveAssignment_12.eContents().get(0);
		private final Keyword cFin_funcionKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Funcion:
		//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//	parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion
		//	declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
		//	"fin_funcion";
		public ParserRule getRule() { return rule; }

		//tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
		//parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)?
		//"inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? "fin_funcion"
		public Group getGroup() { return cGroup; }

		//tipo=TipoVariable
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }

		//TipoVariable
		public RuleCall getTipoTipoVariableParserRuleCall_0_0() { return cTipoTipoVariableParserRuleCall_0_0; }

		//"funcion"
		public Keyword getFuncionKeyword_1() { return cFuncionKeyword_1; }

		//nombre=EString
		public Assignment getNombreAssignment_2() { return cNombreAssignment_2; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_2_0() { return cNombreEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_0() { return cParametrofuncionAssignment_4_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_4_1_1() { return cParametrofuncionAssignment_4_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_4_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"const"?
		public Keyword getConstKeyword_6() { return cConstKeyword_6; }

		//"tipo"?
		public Keyword getTipoKeyword_7() { return cTipoKeyword_7; }

		//"var"
		public Keyword getVarKeyword_8() { return cVarKeyword_8; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_9() { return cGroup_9; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_9_0() { return cDeclaracionAssignment_9_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_9_0_0() { return cDeclaracionDeclaracionParserRuleCall_9_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_9_1() { return cDeclaracionAssignment_9_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_9_1_0() { return cDeclaracionDeclaracionParserRuleCall_9_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_10() { return cInicioKeyword_10; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_11() { return cGroup_11; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_11_0() { return cSentenciasAssignment_11_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_11_0_0() { return cSentenciasSentenciasParserRuleCall_11_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_11_1() { return cSentenciasAssignment_11_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_11_1_0() { return cSentenciasSentenciasParserRuleCall_11_1_0; }

		//devuelve=Devolver?
		public Assignment getDevuelveAssignment_12() { return cDevuelveAssignment_12; }

		//Devolver
		public RuleCall getDevuelveDevolverParserRuleCall_12_0() { return cDevuelveDevolverParserRuleCall_12_0; }

		//"fin_funcion"
		public Keyword getFin_funcionKeyword_13() { return cFin_funcionKeyword_13; }
	}

	public class ProcedimientoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedimiento");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedimientoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreEStringParserRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametrofuncionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_0_0 = (RuleCall)cParametrofuncionAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametrofuncionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0 = (RuleCall)cParametrofuncionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cConstKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTipoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cDeclaracionAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_8_0_0 = (RuleCall)cDeclaracionAssignment_8_0.eContents().get(0);
		private final Assignment cDeclaracionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDeclaracionDeclaracionParserRuleCall_8_1_0 = (RuleCall)cDeclaracionAssignment_8_1.eContents().get(0);
		private final Keyword cInicioKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cSentenciasAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cSentenciasSentenciasParserRuleCall_10_0_0 = (RuleCall)cSentenciasAssignment_10_0.eContents().get(0);
		private final Assignment cSentenciasAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cSentenciasSentenciasParserRuleCall_10_1_0 = (RuleCall)cSentenciasAssignment_10_1.eContents().get(0);
		private final Keyword cFin_procedimientoKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Procedimiento:
		//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		//	"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
		//	sentencias+=Sentencias*)? "fin_procedimiento";
		public ParserRule getRule() { return rule; }

		//"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
		//"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
		//sentencias+=Sentencias*)? "fin_procedimiento"
		public Group getGroup() { return cGroup; }

		//"procedimiento"
		public Keyword getProcedimientoKeyword_0() { return cProcedimientoKeyword_0; }

		//nombre=EString
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//EString
		public RuleCall getNombreEStringParserRuleCall_1_0() { return cNombreEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_0() { return cParametrofuncionAssignment_3_0; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_0_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_0_0; }

		//("," parametrofuncion+=ParametroFuncion)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parametrofuncion+=ParametroFuncion
		public Assignment getParametrofuncionAssignment_3_1_1() { return cParametrofuncionAssignment_3_1_1; }

		//ParametroFuncion
		public RuleCall getParametrofuncionParametroFuncionParserRuleCall_3_1_1_0() { return cParametrofuncionParametroFuncionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"const"?
		public Keyword getConstKeyword_5() { return cConstKeyword_5; }

		//"tipo"?
		public Keyword getTipoKeyword_6() { return cTipoKeyword_6; }

		//"var"
		public Keyword getVarKeyword_7() { return cVarKeyword_7; }

		//(declaracion+=Declaracion declaracion+=Declaracion*)?
		public Group getGroup_8() { return cGroup_8; }

		//declaracion+=Declaracion
		public Assignment getDeclaracionAssignment_8_0() { return cDeclaracionAssignment_8_0; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_8_0_0() { return cDeclaracionDeclaracionParserRuleCall_8_0_0; }

		//declaracion+=Declaracion*
		public Assignment getDeclaracionAssignment_8_1() { return cDeclaracionAssignment_8_1; }

		//Declaracion
		public RuleCall getDeclaracionDeclaracionParserRuleCall_8_1_0() { return cDeclaracionDeclaracionParserRuleCall_8_1_0; }

		//"inicio"
		public Keyword getInicioKeyword_9() { return cInicioKeyword_9; }

		//(sentencias+=Sentencias sentencias+=Sentencias*)?
		public Group getGroup_10() { return cGroup_10; }

		//sentencias+=Sentencias
		public Assignment getSentenciasAssignment_10_0() { return cSentenciasAssignment_10_0; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_10_0_0() { return cSentenciasSentenciasParserRuleCall_10_0_0; }

		//sentencias+=Sentencias*
		public Assignment getSentenciasAssignment_10_1() { return cSentenciasAssignment_10_1; }

		//Sentencias
		public RuleCall getSentenciasSentenciasParserRuleCall_10_1_0() { return cSentenciasSentenciasParserRuleCall_10_1_0; }

		//"fin_procedimiento"
		public Keyword getFin_procedimientoKeyword_11() { return cFin_procedimientoKeyword_11; }
	}

	public class TipoPasoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TipoPaso");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cESKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
		//	"E" | "E/S" | "S";
		public ParserRule getRule() { return rule; }

		//"E" | "E/S" | "S"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"E"
		public Keyword getEKeyword_0() { return cEKeyword_0; }

		//"E/S"
		public Keyword getESKeyword_1() { return cESKeyword_1; }

		//"S"
		public Keyword getSKeyword_2() { return cSKeyword_2; }
	}
	
	
	private CodigoElements pCodigo;
	private ComentarioElements pComentario;
	private TipoComplejoElements pTipoComplejo;
	private SubprocesoElements pSubproceso;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private SentenciasElements pSentencias;
	private BloqueElements pBloque;
	private DeclaracionElements pDeclaracion;
	private InternasElements pInternas;
	private FuncionFicheroAbrirElements pFuncionFicheroAbrir;
	private FuncionFicheroCerrarElements pFuncionFicheroCerrar;
	private ModoAperturaElements pModoApertura;
	private NombreInternaElements pNombreInterna;
	private OperadorElements pOperador;
	private CaracterElements pCaracter;
	private ValorElements pValor;
	private ValoresLeerElements pValoresLeer;
	private ValorComplejoElements pValorComplejo;
	private ValorMatrizElements pValorMatriz;
	private ValorRegistroElements pValorRegistro;
	private ValorVectorElements pValorVector;
	private CampoRegistroElements pCampoRegistro;
	private TipoElements pTipo;
	private TipoDefinidoElements pTipoDefinido;
	private TipoExistenteElements pTipoExistente;
	private ConstantesElements pConstantes;
	private VectorElements pVector;
	private MatrizElements pMatriz;
	private RegistroElements pRegistro;
	private ArchivoElements pArchivo;
	private EnumeradoElements pEnumerado;
	private SubrangoElements pSubrango;
	private SubrangoNumericoElements pSubrangoNumerico;
	private SubrangoEnumeradoElements pSubrangoEnumerado;
	private InicioElements pInicio;
	private EStringElements pEString;
	private DeclaracionVariableElements pDeclaracionVariable;
	private DeclaracionPropiaElements pDeclaracionPropia;
	private LlamadaFuncionElements pLlamadaFuncion;
	private AsignacionElements pAsignacion;
	private AsignacionNormalElements pAsignacionNormal;
	private AsignacionComplejaElements pAsignacionCompleja;
	private EscribirElements pEscribir;
	private LeerElements pLeer;
	private SiElements pSi;
	private MientrasElements pMientras;
	private RepetirElements pRepetir;
	private DesdeElements pDesde;
	private CasoElements pCaso;
	private SegunElements pSegun;
	private NegacionElements pNegacion;
	private UnariaElements pUnaria;
	private TipoVariableElements pTipoVariable;
	private VariableElements pVariable;
	private VariableIDElements pVariableID;
	private TerminalRule tCAD;
	private TerminalRule tCAR;
	private TerminalRule tCOMENT;
	private ConstCadenaElements pConstCadena;
	private NumeroEnteroElements pNumeroEntero;
	private NumeroDecimalElements pNumeroDecimal;
	private ValorBooleanoElements pValorBooleano;
	private EIntElements pEInt;
	private EFloatElements pEFloat;
	private BooleanoElements pBooleano;
	private OperacionElements pOperacion;
	private SignoElements pSigno;
	private Operando_izqElements pOperando_izq;
	private Operando_derElements pOperando_der;
	private SinoElements pSino;
	private DevolverElements pDevolver;
	private NegElements pNeg;
	private ParametroFuncionElements pParametroFuncion;
	private FuncionElements pFuncion;
	private ProcedimientoElements pProcedimiento;
	private TipoPasoElements pTipoPaso;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Codigo:
	//	"Algoritmo" EString (comentarios+=Comentario comentarios+=Comentario*)? ("const" (constantes+=Constantes
	//	constantes+=Constantes*)?)? ("tipo" (tipocomplejo+=TipoComplejo tipocomplejo+=TipoComplejo*)?)? ("var"
	//	(global+=Declaracion global+=Declaracion*)?)? (funcion+=Subproceso funcion+=Subproceso*)? tiene=Inicio
	//	"fin_algoritmo";
	public CodigoElements getCodigoAccess() {
		return (pCodigo != null) ? pCodigo : (pCodigo = new CodigoElements());
	}
	
	public ParserRule getCodigoRule() {
		return getCodigoAccess().getRule();
	}

	//Comentario:
	//	"//" mensaje=COMENT;
	public ComentarioElements getComentarioAccess() {
		return (pComentario != null) ? pComentario : (pComentario = new ComentarioElements());
	}
	
	public ParserRule getComentarioRule() {
		return getComentarioAccess().getRule();
	}

	//TipoComplejo:
	//	Vector | Matriz | Registro | Archivo | Enumerado | Subrango;
	public TipoComplejoElements getTipoComplejoAccess() {
		return (pTipoComplejo != null) ? pTipoComplejo : (pTipoComplejo = new TipoComplejoElements());
	}
	
	public ParserRule getTipoComplejoRule() {
		return getTipoComplejoAccess().getRule();
	}

	//Subproceso:
	//	Funcion | Procedimiento;
	public SubprocesoElements getSubprocesoAccess() {
		return (pSubproceso != null) ? pSubproceso : (pSubproceso = new SubprocesoElements());
	}
	
	public ParserRule getSubprocesoRule() {
		return getSubprocesoAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//Sentencias:
	//	LlamadaFuncion | Asignacion | Escribir | Leer | negacion | Bloque | ValorComplejo | FuncionFicheroAbrir |
	//	FuncionFicheroCerrar;
	public SentenciasElements getSentenciasAccess() {
		return (pSentencias != null) ? pSentencias : (pSentencias = new SentenciasElements());
	}
	
	public ParserRule getSentenciasRule() {
		return getSentenciasAccess().getRule();
	}

	//Bloque:
	//	Si | mientras | repetir | desde | segun;
	public BloqueElements getBloqueAccess() {
		return (pBloque != null) ? pBloque : (pBloque = new BloqueElements());
	}
	
	public ParserRule getBloqueRule() {
		return getBloqueAccess().getRule();
	}

	//Declaracion:
	//	DeclaracionVariable | DeclaracionPropia;
	public DeclaracionElements getDeclaracionAccess() {
		return (pDeclaracion != null) ? pDeclaracion : (pDeclaracion = new DeclaracionElements());
	}
	
	public ParserRule getDeclaracionRule() {
		return getDeclaracionAccess().getRule();
	}

	//Internas:
	//	nombre=NombreInterna "(" (operador+=Operador ("," operador+=Operador)*) ")";
	public InternasElements getInternasAccess() {
		return (pInternas != null) ? pInternas : (pInternas = new InternasElements());
	}
	
	public ParserRule getInternasRule() {
		return getInternasAccess().getRule();
	}

	//FuncionFicheroAbrir:
	//	"abrir" "(" (variable+=VariableID "," modo=ModoApertura "," variable+=Operador) ")";
	public FuncionFicheroAbrirElements getFuncionFicheroAbrirAccess() {
		return (pFuncionFicheroAbrir != null) ? pFuncionFicheroAbrir : (pFuncionFicheroAbrir = new FuncionFicheroAbrirElements());
	}
	
	public ParserRule getFuncionFicheroAbrirRule() {
		return getFuncionFicheroAbrirAccess().getRule();
	}

	//FuncionFicheroCerrar:
	//	"cerrar" "(" variable=VariableID ")";
	public FuncionFicheroCerrarElements getFuncionFicheroCerrarAccess() {
		return (pFuncionFicheroCerrar != null) ? pFuncionFicheroCerrar : (pFuncionFicheroCerrar = new FuncionFicheroCerrarElements());
	}
	
	public ParserRule getFuncionFicheroCerrarRule() {
		return getFuncionFicheroCerrarAccess().getRule();
	}

	//ModoApertura:
	//	"escritura" | "lectura";
	public ModoAperturaElements getModoAperturaAccess() {
		return (pModoApertura != null) ? pModoApertura : (pModoApertura = new ModoAperturaElements());
	}
	
	public ParserRule getModoAperturaRule() {
		return getModoAperturaAccess().getRule();
	}

	//NombreInterna:
	//	"cos" | "cuadrado" | "exp" | "ln" | "log" | "sen" | "sqrt" | "longitud" | "concatena";
	public NombreInternaElements getNombreInternaAccess() {
		return (pNombreInterna != null) ? pNombreInterna : (pNombreInterna = new NombreInternaElements());
	}
	
	public ParserRule getNombreInternaRule() {
		return getNombreInternaAccess().getRule();
	}

	//Operador:
	//	VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano | ValorComplejo;
	public OperadorElements getOperadorAccess() {
		return (pOperador != null) ? pOperador : (pOperador = new OperadorElements());
	}
	
	public ParserRule getOperadorRule() {
		return getOperadorAccess().getRule();
	}

	//Caracter:
	//	contenido=CAR;
	public CaracterElements getCaracterAccess() {
		return (pCaracter != null) ? pCaracter : (pCaracter = new CaracterElements());
	}
	
	public ParserRule getCaracterRule() {
		return getCaracterAccess().getRule();
	}

	//valor:
	//	LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter |
	//	Internas | unaria | ValorComplejo;
	public ValorElements getValorAccess() {
		return (pValor != null) ? pValor : (pValor = new ValorElements());
	}
	
	public ParserRule getValorRule() {
		return getValorAccess().getRule();
	}

	//valoresLeer returns Operador:
	//	VariableID | ValorVector | ValorMatriz | ValorRegistro;
	public ValoresLeerElements getValoresLeerAccess() {
		return (pValoresLeer != null) ? pValoresLeer : (pValoresLeer = new ValoresLeerElements());
	}
	
	public ParserRule getValoresLeerRule() {
		return getValoresLeerAccess().getRule();
	}

	//ValorComplejo:
	//	ValorRegistro | ValorVector | ValorMatriz;
	public ValorComplejoElements getValorComplejoAccess() {
		return (pValorComplejo != null) ? pValorComplejo : (pValorComplejo = new ValorComplejoElements());
	}
	
	public ParserRule getValorComplejoRule() {
		return getValorComplejoAccess().getRule();
	}

	//ValorMatriz:
	//	(nombre_matriz=EString "[" (indices+=NumeroEntero | indices+=VariableID) "][" (indices+=NumeroEntero |
	//	indices+=VariableID) "]") ("." campo+=CampoRegistro)?;
	public ValorMatrizElements getValorMatrizAccess() {
		return (pValorMatriz != null) ? pValorMatriz : (pValorMatriz = new ValorMatrizElements());
	}
	
	public ParserRule getValorMatrizRule() {
		return getValorMatrizAccess().getRule();
	}

	//ValorRegistro:
	//	nombre_registro=EString "." (campo+=CampoRegistro ("." campo+=CampoRegistro)*);
	public ValorRegistroElements getValorRegistroAccess() {
		return (pValorRegistro != null) ? pValorRegistro : (pValorRegistro = new ValorRegistroElements());
	}
	
	public ParserRule getValorRegistroRule() {
		return getValorRegistroAccess().getRule();
	}

	//ValorVector:
	//	(nombre_vector=EString "[" (indice=NumeroEntero | indice=VariableID) "]") ("." campo+=CampoRegistro)?;
	public ValorVectorElements getValorVectorAccess() {
		return (pValorVector != null) ? pValorVector : (pValorVector = new ValorVectorElements());
	}
	
	public ParserRule getValorVectorRule() {
		return getValorVectorAccess().getRule();
	}

	//CampoRegistro:
	//	nombre_campo=EString;
	public CampoRegistroElements getCampoRegistroAccess() {
		return (pCampoRegistro != null) ? pCampoRegistro : (pCampoRegistro = new CampoRegistroElements());
	}
	
	public ParserRule getCampoRegistroRule() {
		return getCampoRegistroAccess().getRule();
	}

	//Tipo:
	//	TipoDefinido | TipoExistente;
	public TipoElements getTipoAccess() {
		return (pTipo != null) ? pTipo : (pTipo = new TipoElements());
	}
	
	public ParserRule getTipoRule() {
		return getTipoAccess().getRule();
	}

	//TipoDefinido:
	//	tipo=EString;
	public TipoDefinidoElements getTipoDefinidoAccess() {
		return (pTipoDefinido != null) ? pTipoDefinido : (pTipoDefinido = new TipoDefinidoElements());
	}
	
	public ParserRule getTipoDefinidoRule() {
		return getTipoDefinidoAccess().getRule();
	}

	//TipoExistente:
	//	tipo=TipoVariable;
	public TipoExistenteElements getTipoExistenteAccess() {
		return (pTipoExistente != null) ? pTipoExistente : (pTipoExistente = new TipoExistenteElements());
	}
	
	public ParserRule getTipoExistenteRule() {
		return getTipoExistenteAccess().getRule();
	}

	//Constantes:
	//	variable=Variable "=" valor=valor;
	public ConstantesElements getConstantesAccess() {
		return (pConstantes != null) ? pConstantes : (pConstantes = new ConstantesElements());
	}
	
	public ParserRule getConstantesRule() {
		return getConstantesAccess().getRule();
	}

	//Vector:
	//	"vector " "[" (valor=NumeroEntero | valor=VariableID) "]" "de" tipo=Tipo ": " nombre=EString;
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Matriz:
	//	"matriz " "[" (valor+=NumeroEntero | valor+=VariableID) "][" (valor+=NumeroEntero | valor+=VariableID) "]" "de"
	//	tipo=Tipo ": " nombre=EString;
	public MatrizElements getMatrizAccess() {
		return (pMatriz != null) ? pMatriz : (pMatriz = new MatrizElements());
	}
	
	public ParserRule getMatrizRule() {
		return getMatrizAccess().getRule();
	}

	//Registro:
	//	"registro:" nombre=EString (variable+=Declaracion variable+=Declaracion*) "fin_registro";
	public RegistroElements getRegistroAccess() {
		return (pRegistro != null) ? pRegistro : (pRegistro = new RegistroElements());
	}
	
	public ParserRule getRegistroRule() {
		return getRegistroAccess().getRule();
	}

	//Archivo:
	//	"archivo de " tipo=Tipo ": " nombre=EString;
	public ArchivoElements getArchivoAccess() {
		return (pArchivo != null) ? pArchivo : (pArchivo = new ArchivoElements());
	}
	
	public ParserRule getArchivoRule() {
		return getArchivoAccess().getRule();
	}

	//Enumerado:
	//	nombre=EString "=" "{" (valor+=valor ("," valor+=valor)*) "}";
	public EnumeradoElements getEnumeradoAccess() {
		return (pEnumerado != null) ? pEnumerado : (pEnumerado = new EnumeradoElements());
	}
	
	public ParserRule getEnumeradoRule() {
		return getEnumeradoAccess().getRule();
	}

	//Subrango:
	//	SubrangoNumerico | SubrangoEnumerado;
	public SubrangoElements getSubrangoAccess() {
		return (pSubrango != null) ? pSubrango : (pSubrango = new SubrangoElements());
	}
	
	public ParserRule getSubrangoRule() {
		return getSubrangoAccess().getRule();
	}

	//SubrangoNumerico:
	//	nombre=EString "=" limite_inf=EInt ".." limite_sup=EInt;
	public SubrangoNumericoElements getSubrangoNumericoAccess() {
		return (pSubrangoNumerico != null) ? pSubrangoNumerico : (pSubrangoNumerico = new SubrangoNumericoElements());
	}
	
	public ParserRule getSubrangoNumericoRule() {
		return getSubrangoNumericoAccess().getRule();
	}

	//SubrangoEnumerado:
	//	nombre=EString "=" limite_inf=EString ".." limite_sup=EString;
	public SubrangoEnumeradoElements getSubrangoEnumeradoAccess() {
		return (pSubrangoEnumerado != null) ? pSubrangoEnumerado : (pSubrangoEnumerado = new SubrangoEnumeradoElements());
	}
	
	public ParserRule getSubrangoEnumeradoRule() {
		return getSubrangoEnumeradoAccess().getRule();
	}

	//Inicio:
	//	"principal" {Inicio} "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (tiene+=Sentencias
	//	tiene+=Sentencias*)? "fin_inicio";
	public InicioElements getInicioAccess() {
		return (pInicio != null) ? pInicio : (pInicio = new InicioElements());
	}
	
	public ParserRule getInicioRule() {
		return getInicioAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DeclaracionVariable:
	//	tipo=TipoVariable ": " variable+=Variable ("," variable+=Variable)*;
	public DeclaracionVariableElements getDeclaracionVariableAccess() {
		return (pDeclaracionVariable != null) ? pDeclaracionVariable : (pDeclaracionVariable = new DeclaracionVariableElements());
	}
	
	public ParserRule getDeclaracionVariableRule() {
		return getDeclaracionVariableAccess().getRule();
	}

	//DeclaracionPropia:
	//	tipo=EString ": " variable+=Variable ("," variable+=Variable)*;
	public DeclaracionPropiaElements getDeclaracionPropiaAccess() {
		return (pDeclaracionPropia != null) ? pDeclaracionPropia : (pDeclaracionPropia = new DeclaracionPropiaElements());
	}
	
	public ParserRule getDeclaracionPropiaRule() {
		return getDeclaracionPropiaAccess().getRule();
	}

	//LlamadaFuncion:
	//	nombre=EString "(" (operador+=valor ("," operador+=valor)*)? ")";
	public LlamadaFuncionElements getLlamadaFuncionAccess() {
		return (pLlamadaFuncion != null) ? pLlamadaFuncion : (pLlamadaFuncion = new LlamadaFuncionElements());
	}
	
	public ParserRule getLlamadaFuncionRule() {
		return getLlamadaFuncionAccess().getRule();
	}

	//Asignacion:
	//	AsignacionNormal | AsignacionCompleja;
	public AsignacionElements getAsignacionAccess() {
		return (pAsignacion != null) ? pAsignacion : (pAsignacion = new AsignacionElements());
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//AsignacionNormal:
	//	lvalue=EString //	 Mat+=MAT*
	//	"=" operador=valor;
	public AsignacionNormalElements getAsignacionNormalAccess() {
		return (pAsignacionNormal != null) ? pAsignacionNormal : (pAsignacionNormal = new AsignacionNormalElements());
	}
	
	public ParserRule getAsignacionNormalRule() {
		return getAsignacionNormalAccess().getRule();
	}

	//AsignacionCompleja:
	//	complejo=ValorComplejo //	Mat+=MAT*
	//	"=" operador=valor;
	public AsignacionComplejaElements getAsignacionComplejaAccess() {
		return (pAsignacionCompleja != null) ? pAsignacionCompleja : (pAsignacionCompleja = new AsignacionComplejaElements());
	}
	
	public ParserRule getAsignacionComplejaRule() {
		return getAsignacionComplejaAccess().getRule();
	}

	//Escribir:
	//	"escribir" "(" operador+=Operador ("," operador+=Operador)* ")";
	public EscribirElements getEscribirAccess() {
		return (pEscribir != null) ? pEscribir : (pEscribir = new EscribirElements());
	}
	
	public ParserRule getEscribirRule() {
		return getEscribirAccess().getRule();
	}

	//Leer:
	//	"leer" "(" variable=valoresLeer ")";
	public LeerElements getLeerAccess() {
		return (pLeer != null) ? pLeer : (pLeer = new LeerElements());
	}
	
	public ParserRule getLeerRule() {
		return getLeerAccess().getRule();
	}

	//Si:
	//	"si" valor=valor "entonces" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver? sino=Sino? "fin_si";
	public SiElements getSiAccess() {
		return (pSi != null) ? pSi : (pSi = new SiElements());
	}
	
	public ParserRule getSiRule() {
		return getSiAccess().getRule();
	}

	//mientras:
	//	"mientras" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)? "fin_mientras";
	public MientrasElements getMientrasAccess() {
		return (pMientras != null) ? pMientras : (pMientras = new MientrasElements());
	}
	
	public ParserRule getMientrasRule() {
		return getMientrasAccess().getRule();
	}

	//repetir:
	//	"repetir" (sentencias+=Sentencias sentencias+=Sentencias*)? "hasta_que" valor=valor;
	public RepetirElements getRepetirAccess() {
		return (pRepetir != null) ? pRepetir : (pRepetir = new RepetirElements());
	}
	
	public ParserRule getRepetirRule() {
		return getRepetirAccess().getRule();
	}

	//desde:
	//	"desde" asignacion=AsignacionNormal "hasta" valor=valor "hacer" (sentencias+=Sentencias sentencias+=Sentencias*)?
	//	"fin_desde";
	public DesdeElements getDesdeAccess() {
		return (pDesde != null) ? pDesde : (pDesde = new DesdeElements());
	}
	
	public ParserRule getDesdeRule() {
		return getDesdeAccess().getRule();
	}

	//Caso:
	//	operador=Operador ": " (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
	public CasoElements getCasoAccess() {
		return (pCaso != null) ? pCaso : (pCaso = new CasoElements());
	}
	
	public ParserRule getCasoRule() {
		return getCasoAccess().getRule();
	}

	//segun:
	//	"segun_sea" "(" valor=valor ")" "hacer" (caso+=Caso caso+=Caso*)? "en_otro_caso:" (sentencias+=Sentencias
	//	sentencias+=Sentencias*)? devuelve=Devolver? "fin_segun";
	public SegunElements getSegunAccess() {
		return (pSegun != null) ? pSegun : (pSegun = new SegunElements());
	}
	
	public ParserRule getSegunRule() {
		return getSegunAccess().getRule();
	}

	//negacion:
	//	nombre=EString ssigno=neg;
	public NegacionElements getNegacionAccess() {
		return (pNegacion != null) ? pNegacion : (pNegacion = new NegacionElements());
	}
	
	public ParserRule getNegacionRule() {
		return getNegacionAccess().getRule();
	}

	//unaria:
	//	"(" ssigno=neg variable=valor ")";
	public UnariaElements getUnariaAccess() {
		return (pUnaria != null) ? pUnaria : (pUnaria = new UnariaElements());
	}
	
	public ParserRule getUnariaRule() {
		return getUnariaAccess().getRule();
	}

	//TipoVariable:
	//	"entero" | "caracter" | "real" | "logico" | "cadena";
	public TipoVariableElements getTipoVariableAccess() {
		return (pTipoVariable != null) ? pTipoVariable : (pTipoVariable = new TipoVariableElements());
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}

	//Variable:
	//	nombre=EString;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	////	 Mat+=MAT*;
	//VariableID:
	//	nombre=EString;
	public VariableIDElements getVariableIDAccess() {
		return (pVariableID != null) ? pVariableID : (pVariableID = new VariableIDElements());
	}
	
	public ParserRule getVariableIDRule() {
		return getVariableIDAccess().getRule();
	}

	////Mat+=MAT*;
	//terminal CAD:
	//	"\"" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9")* "\"";
	public TerminalRule getCADRule() {
		return (tCAD != null) ? tCAD : (tCAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAD"));
	} 

	//terminal CAR:
	//	"\'" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9") "\'";
	public TerminalRule getCARRule() {
		return (tCAR != null) ? tCAR : (tCAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAR"));
	} 

	//terminal COMENT:
	//	"/ *" ("a".."z" | "A".."Z" | "_" | " " | "!" | "#" | "@" | "%" | "&" | "(" | ")" | "=" | "?" | "\\" | "0".."9")* "* /";
	public TerminalRule getCOMENTRule() {
		return (tCOMENT != null) ? tCOMENT : (tCOMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMENT"));
	} 

	////terminal MAT: 
	////'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;
	//ConstCadena:
	//	contenido=CAD;
	public ConstCadenaElements getConstCadenaAccess() {
		return (pConstCadena != null) ? pConstCadena : (pConstCadena = new ConstCadenaElements());
	}
	
	public ParserRule getConstCadenaRule() {
		return getConstCadenaAccess().getRule();
	}

	//NumeroEntero:
	//	valor=EInt;
	public NumeroEnteroElements getNumeroEnteroAccess() {
		return (pNumeroEntero != null) ? pNumeroEntero : (pNumeroEntero = new NumeroEnteroElements());
	}
	
	public ParserRule getNumeroEnteroRule() {
		return getNumeroEnteroAccess().getRule();
	}

	//NumeroDecimal:
	//	valor=EFloat;
	public NumeroDecimalElements getNumeroDecimalAccess() {
		return (pNumeroDecimal != null) ? pNumeroDecimal : (pNumeroDecimal = new NumeroDecimalElements());
	}
	
	public ParserRule getNumeroDecimalRule() {
		return getNumeroDecimalAccess().getRule();
	}

	//ValorBooleano:
	//	valor=booleano;
	public ValorBooleanoElements getValorBooleanoAccess() {
		return (pValorBooleano != null) ? pValorBooleano : (pValorBooleano = new ValorBooleanoElements());
	}
	
	public ParserRule getValorBooleanoRule() {
		return getValorBooleanoAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EFloat returns ecore::EFloat:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EFloatElements getEFloatAccess() {
		return (pEFloat != null) ? pEFloat : (pEFloat = new EFloatElements());
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	//booleano:
	//	"verdadero" | "falso";
	public BooleanoElements getBooleanoAccess() {
		return (pBooleano != null) ? pBooleano : (pBooleano = new BooleanoElements());
	}
	
	public ParserRule getBooleanoRule() {
		return getBooleanoAccess().getRule();
	}

	//operacion:
	//	"(" op_izq=operando_izq signo_op=signo op_der=operando_der ")";
	public OperacionElements getOperacionAccess() {
		return (pOperacion != null) ? pOperacion : (pOperacion = new OperacionElements());
	}
	
	public ParserRule getOperacionRule() {
		return getOperacionAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / signo:
	//	"+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "y" | "o" | "==" | "!=";
	public SignoElements getSignoAccess() {
		return (pSigno != null) ? pSigno : (pSigno = new SignoElements());
	}
	
	public ParserRule getSignoRule() {
		return getSignoAccess().getRule();
	}

	//operando_izq:
	//	oper_izq=valor;
	public Operando_izqElements getOperando_izqAccess() {
		return (pOperando_izq != null) ? pOperando_izq : (pOperando_izq = new Operando_izqElements());
	}
	
	public ParserRule getOperando_izqRule() {
		return getOperando_izqAccess().getRule();
	}

	//operando_der:
	//	oper_der=valor;
	public Operando_derElements getOperando_derAccess() {
		return (pOperando_der != null) ? pOperando_der : (pOperando_der = new Operando_derElements());
	}
	
	public ParserRule getOperando_derRule() {
		return getOperando_derAccess().getRule();
	}

	//Sino:
	//	{Sino} "sino" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?;
	public SinoElements getSinoAccess() {
		return (pSino != null) ? pSino : (pSino = new SinoElements());
	}
	
	public ParserRule getSinoRule() {
		return getSinoAccess().getRule();
	}

	//Devolver:
	//	{Devolver} "devolver" "(" devuelve=valor ")";
	public DevolverElements getDevolverAccess() {
		return (pDevolver != null) ? pDevolver : (pDevolver = new DevolverElements());
	}
	
	public ParserRule getDevolverRule() {
		return getDevolverAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / neg:
	//	"no";
	public NegElements getNegAccess() {
		return (pNeg != null) ? pNeg : (pNeg = new NegElements());
	}
	
	public ParserRule getNegRule() {
		return getNegAccess().getRule();
	}

	//ParametroFuncion:
	//	paso=TipoPaso tipo=Tipo ": " variable=Variable;
	public ParametroFuncionElements getParametroFuncionAccess() {
		return (pParametroFuncion != null) ? pParametroFuncion : (pParametroFuncion = new ParametroFuncionElements());
	}
	
	public ParserRule getParametroFuncionRule() {
		return getParametroFuncionAccess().getRule();
	}

	//Funcion:
	//	tipo=TipoVariable "funcion" nombre=EString "(" (parametrofuncion+=ParametroFuncion (","
	//	parametrofuncion+=ParametroFuncion)*)? ")" "const"? "tipo"? "var" (declaracion+=Declaracion
	//	declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias sentencias+=Sentencias*)? devuelve=Devolver?
	//	"fin_funcion";
	public FuncionElements getFuncionAccess() {
		return (pFuncion != null) ? pFuncion : (pFuncion = new FuncionElements());
	}
	
	public ParserRule getFuncionRule() {
		return getFuncionAccess().getRule();
	}

	//Procedimiento:
	//	"procedimiento" nombre=EString "(" (parametrofuncion+=ParametroFuncion ("," parametrofuncion+=ParametroFuncion)*)? ")"
	//	"const"? "tipo"? "var" (declaracion+=Declaracion declaracion+=Declaracion*)? "inicio" (sentencias+=Sentencias
	//	sentencias+=Sentencias*)? "fin_procedimiento";
	public ProcedimientoElements getProcedimientoAccess() {
		return (pProcedimiento != null) ? pProcedimiento : (pProcedimiento = new ProcedimientoElements());
	}
	
	public ParserRule getProcedimientoRule() {
		return getProcedimientoAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / TipoPaso:
	//	"E" | "E/S" | "S";
	public TipoPasoElements getTipoPasoAccess() {
		return (pTipoPaso != null) ? pTipoPaso : (pTipoPaso = new TipoPasoElements());
	}
	
	public ParserRule getTipoPasoRule() {
		return getTipoPasoAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
