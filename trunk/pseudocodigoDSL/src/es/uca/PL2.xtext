// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://diagramapseudocodigo/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Codigo returns Codigo:
	(funcion+=Subproceso (funcion+=Subproceso)* )?
	tiene=Inicio
	;


Subproceso returns Subproceso:
	Funcion | Procedimiento;

terminal ML_COMMENT : '/*' (!'*') -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;

Sentencias returns Sentencias:
	DeclaracionVariable | LlamadaFuncion | Asignacion | Escribir | Leer | Si | mientras | repetir | desde | incremento;


Operador returns Operador:
	VariableID | ConstCadena | Caracter | NumeroEntero | NumeroDecimal | ValorBooleano;

Caracter returns Caracter:
	contenido=CAR;


valor returns valor:
	LlamadaFuncion | VariableID | ConstCadena | NumeroEntero | NumeroDecimal | operacion | ValorBooleano | Caracter;

Inicio returns Inicio:
	{Inicio}
	'inicio'
		(tiene+=Sentencias (  tiene+=Sentencias)*  )?
	'fin inicio';

EString returns ecore::EString:
	STRING | ID;

DeclaracionVariable returns DeclaracionVariable:
	tipo=TipoVariable
	tieneIDs+=Variable ( "," tieneIDs+=Variable)*;

LlamadaFuncion returns LlamadaFuncion:
	nombre=EString
	'('
		(operador+=Operador ( "," operador+=Operador)* )?
	')';

Asignacion returns Asignacion:
	 lvalue=EString
	 Mat+=MATRIZ*
	 '='
	operador=valor;

Escribir returns Escribir:
	'escribir'
	'('
		 operador+=Operador ( "," operador+=Operador)* 
	')';

Leer returns Leer:
	'leer'
	'('
		variable=VariableID
	')';

Si returns Si:
	'si'valor=valor 'entonces'
		(sentencias+=Sentencias ( sentencias+=Sentencias)* )?
	(sino=Sino)?
	'fin si';

mientras returns mientras:
	'mientras'
	valor=valor 'repetir'
		(sentencias+=Sentencias ( sentencias+=Sentencias)*  )?
	'fin mientras';

repetir returns repetir:
	'repetir'
		(sentencias+=Sentencias ( sentencias+=Sentencias)*)?
	 'cuando' valor=valor
	 'fin repetir';

desde returns desde:
	'desde' asignacion=Asignacion 'hasta' valor=valor 'hacer'
		(sentencias+=Sentencias ( sentencias+=Sentencias)* )?
	'fin desde';

incremento returns incremento:
	nombre=EString
	ssigno=inc;

TipoVariable returns TipoVariable:
	'entero' | 'caracter' | 'real' | 'logico' | 'cadena';
	
Variable returns Variable:
	 nombre=EString
	 Mat+=MATRIZ*;

VariableID returns VariableID:
	nombre=EString
	Mat+=MATRIZ*;

terminal CAD: '"' ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9')* '"';
terminal CAR: "'" ('a'..'z'|'A'..'Z'|'_'|' '|'!'|'#'|'@'|'%'|'&'|'('|')'|'='|'?'|'\\'|'0'..'9') "'";

terminal MATRIZ: 
'[' ('a'..'z'|'A'..'Z'|'0'..'9')*('--'|'++')? ']' ;


ConstCadena returns ConstCadena:
	contenido=CAD;

NumeroEntero returns NumeroEntero:
	 valor=EInt;

NumeroDecimal returns NumeroDecimal:
	 valor=EFloat;

ValorBooleano returns ValorBooleano:
	 valor=booleano;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

booleano returns booleano:
	'verdadero' | 'falso'
	;
	
operacion returns operacion:
	'('
		op_izq=operando_izq
		signo_op=signo		
		op_der=operando_der
	')';

signo returns signo:
	('+' | '-' | '*' | '/' | '<' | '>' | '>=' | '<=' | 'y' | 'o' | '==' | '!=')
 /* TODO: implement this rule and an appropriate IValueConverter */;

operando_izq returns operando_izq:
	 oper_izq=valor;

operando_der returns operando_der:
	 oper_der=valor;


Sino returns Sino:
	{Sino}
	'sino'
	(sentencias+=Sentencias ( sentencias+=Sentencias)* )?;

inc returns inc:
	"++" | "--" /* TODO: implement this rule and an appropriate IValueConverter */;
	
ParametroFuncion returns ParametroFuncion:
	tipo=TipoVariable
	paso=TipoPaso
	variable=Variable;

Funcion returns Funcion:
	'funcion'
	(tipo=TipoVariable)
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	( sentencias+=Sentencias (  sentencias+=Sentencias)*  )?
	'devuelve' devuelve=valor
	'fin funcion';
Procedimiento returns Procedimiento:
	'procedimiento'
	nombre=EString
	'('(parametrofuncion+=ParametroFuncion ( "," parametrofuncion+=ParametroFuncion)*  )?')'
	( sentencias+=Sentencias (  sentencias+=Sentencias)*  )?
	'fin procedimiento';
	
TipoPaso returns TipoPaso:
	'E' | 'E/S'/* TODO: implement this rule and an appropriate IValueConverter */;
